
low.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003fe0  08003fe0  00004fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080040f0  080040f0  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f0  080040f0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000050f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040f4  080040f4  000050f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080040f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000068  08004160  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004160  00006234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a0b  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168f  00000000  00000000  0000ca9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b5  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a9b  00000000  00000000  0000ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000969c  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e4f  00000000  00000000  0002ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3df3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002654  00000000  00000000  000b3e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fc8 	.word	0x08003fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003fc8 	.word	0x08003fc8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <MPU6050_init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_StatusTypeDef ret;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	2301      	movs	r3, #1
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2275      	movs	r2, #117	@ 0x75
 80009a4:	21d0      	movs	r1, #208	@ 0xd0
 80009a6:	4836      	ldr	r0, [pc, #216]	@ (8000a80 <MPU6050_init+0xf4>)
 80009a8:	f001 f882 	bl	8001ab0 <HAL_I2C_Mem_Read>
	if (check != 104){
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	2b68      	cmp	r3, #104	@ 0x68
 80009b0:	d003      	beq.n	80009ba <MPU6050_init+0x2e>
		printf("Imu not detected");
 80009b2:	4834      	ldr	r0, [pc, #208]	@ (8000a84 <MPU6050_init+0xf8>)
 80009b4:	f002 fc90 	bl	80032d8 <iprintf>
		return;
 80009b8:	e05e      	b.n	8000a78 <MPU6050_init+0xec>
	}
	else {
		//Power management register write all 0's to wake up sensor
		data = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	717b      	strb	r3, [r7, #5]
		  ret=HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 100);
 80009be:	2364      	movs	r3, #100	@ 0x64
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	2301      	movs	r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	1d7b      	adds	r3, r7, #5
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	226b      	movs	r2, #107	@ 0x6b
 80009ce:	21d0      	movs	r1, #208	@ 0xd0
 80009d0:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <MPU6050_init+0xf4>)
 80009d2:	f000 ff73 	bl	80018bc <HAL_I2C_Mem_Write>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
		 if (ret != HAL_OK){
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <MPU6050_init+0x5c>
		 			printf("Sensor is not awake");
 80009e0:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <MPU6050_init+0xfc>)
 80009e2:	f002 fc79 	bl	80032d8 <iprintf>
		 			return;
 80009e6:	e047      	b.n	8000a78 <MPU6050_init+0xec>
		 		}
		 HAL_Delay(10);
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 fb97 	bl	800111c <HAL_Delay>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 80009ee:	2307      	movs	r3, #7
 80009f0:	717b      	strb	r3, [r7, #5]
		 ret=HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 100);
 80009f2:	2364      	movs	r3, #100	@ 0x64
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	1d7b      	adds	r3, r7, #5
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	2219      	movs	r2, #25
 8000a02:	21d0      	movs	r1, #208	@ 0xd0
 8000a04:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <MPU6050_init+0xf4>)
 8000a06:	f000 ff59 	bl	80018bc <HAL_I2C_Mem_Write>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
		 if (ret != HAL_OK){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <MPU6050_init+0x90>
		 			printf("Failed to configure Data rate");
 8000a14:	481d      	ldr	r0, [pc, #116]	@ (8000a8c <MPU6050_init+0x100>)
 8000a16:	f002 fc5f 	bl	80032d8 <iprintf>
		 			return;
 8000a1a:	e02d      	b.n	8000a78 <MPU6050_init+0xec>
		 		}
		//Writing both register with 0 to set full scale range
		data = 8;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	717b      	strb	r3, [r7, #5]
		 ret=HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 100);
 8000a20:	2364      	movs	r3, #100	@ 0x64
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1d7b      	adds	r3, r7, #5
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	221c      	movs	r2, #28
 8000a30:	21d0      	movs	r1, #208	@ 0xd0
 8000a32:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <MPU6050_init+0xf4>)
 8000a34:	f000 ff42 	bl	80018bc <HAL_I2C_Mem_Write>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
		 if (ret != HAL_OK){
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <MPU6050_init+0xbe>
		 			printf("Failed to configure acceleration");
 8000a42:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <MPU6050_init+0x104>)
 8000a44:	f002 fc48 	bl	80032d8 <iprintf>
		 			return;
 8000a48:	e016      	b.n	8000a78 <MPU6050_init+0xec>
		 		}

		data = 8;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	717b      	strb	r3, [r7, #5]
		ret=HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 100);
 8000a4e:	2364      	movs	r3, #100	@ 0x64
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	1d7b      	adds	r3, r7, #5
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	221b      	movs	r2, #27
 8000a5e:	21d0      	movs	r1, #208	@ 0xd0
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <MPU6050_init+0xf4>)
 8000a62:	f000 ff2b 	bl	80018bc <HAL_I2C_Mem_Write>
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
		
		if (ret != HAL_OK){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <MPU6050_init+0xec>
			printf("Failed to configure gyroscope");
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MPU6050_init+0x108>)
 8000a72:	f002 fc31 	bl	80032d8 <iprintf>
			return;
 8000a76:	bf00      	nop
		}
	}

}
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000008c 	.word	0x2000008c
 8000a84:	08003fe0 	.word	0x08003fe0
 8000a88:	08003ff4 	.word	0x08003ff4
 8000a8c:	08004008 	.word	0x08004008
 8000a90:	08004028 	.word	0x08004028
 8000a94:	0800404c 	.word	0x0800404c

08000a98 <MPU6050_Read_Gyro>:
	*Ax = Accel_X_RAW*100/16384.0;
	*Ay = Accel_Y_RAW*100/16384.0;
	*Az = Accel_Z_RAW*100/16384.0;
}
void MPU6050_Read_Gyro (float* Gx, float* Gy, float* Gz)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af04      	add	r7, sp, #16
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 100);
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	2243      	movs	r2, #67	@ 0x43
 8000ab6:	21d0      	movs	r1, #208	@ 0xd0
 8000ab8:	4831      	ldr	r0, [pc, #196]	@ (8000b80 <MPU6050_Read_Gyro+0xe8>)
 8000aba:	f000 fff9 	bl	8001ab0 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000abe:	7c3b      	ldrb	r3, [r7, #16]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	7c7b      	ldrb	r3, [r7, #17]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <MPU6050_Read_Gyro+0xec>)
 8000ace:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ad0:	7cbb      	ldrb	r3, [r7, #18]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	7cfb      	ldrb	r3, [r7, #19]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <MPU6050_Read_Gyro+0xf0>)
 8000ae0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ae2:	7d3b      	ldrb	r3, [r7, #20]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	7d7b      	ldrb	r3, [r7, #21]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <MPU6050_Read_Gyro+0xf4>)
 8000af2:	801a      	strh	r2, [r3, #0]
	
	*Gx = Gyro_X_RAW/65.5;
 8000af4:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <MPU6050_Read_Gyro+0xec>)
 8000af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fc7a 	bl	80003f4 <__aeabi_i2d>
 8000b00:	a31d      	add	r3, pc, #116	@ (adr r3, 8000b78 <MPU6050_Read_Gyro+0xe0>)
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	f7ff fe09 	bl	800071c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff feeb 	bl	80008ec <__aeabi_d2f>
 8000b16:	4602      	mov	r2, r0
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	601a      	str	r2, [r3, #0]
	*Gy = Gyro_Y_RAW/65.5;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MPU6050_Read_Gyro+0xf0>)
 8000b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc66 	bl	80003f4 <__aeabi_i2d>
 8000b28:	a313      	add	r3, pc, #76	@ (adr r3, 8000b78 <MPU6050_Read_Gyro+0xe0>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f7ff fdf5 	bl	800071c <__aeabi_ddiv>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4610      	mov	r0, r2
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f7ff fed7 	bl	80008ec <__aeabi_d2f>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	601a      	str	r2, [r3, #0]
	*Gz = Gyro_Z_RAW/65.5;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MPU6050_Read_Gyro+0xf4>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fc52 	bl	80003f4 <__aeabi_i2d>
 8000b50:	a309      	add	r3, pc, #36	@ (adr r3, 8000b78 <MPU6050_Read_Gyro+0xe0>)
 8000b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b56:	f7ff fde1 	bl	800071c <__aeabi_ddiv>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff fec3 	bl	80008ec <__aeabi_d2f>
 8000b66:	4602      	mov	r2, r0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	f3af 8000 	nop.w
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	40506000 	.word	0x40506000
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	20000084 	.word	0x20000084
 8000b88:	20000086 	.word	0x20000086
 8000b8c:	20000088 	.word	0x20000088

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fa5f 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f831 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 f899 	bl	8000cd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba2:	f000 f869 	bl	8000c78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_StatusTypeDef ret =HAL_I2C_IsDeviceReady(&hi2c1, (0b1101000<<1) +0, 1, 100);
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	2201      	movs	r2, #1
 8000baa:	21d0      	movs	r1, #208	@ 0xd0
 8000bac:	4811      	ldr	r0, [pc, #68]	@ (8000bf4 <main+0x64>)
 8000bae:	f001 f9f3 	bl	8001f98 <HAL_I2C_IsDeviceReady>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	75fb      	strb	r3, [r7, #23]

    if (ret == HAL_OK){
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d105      	bne.n	8000bc8 <main+0x38>
  	  printf("Device is ready");
 8000bbc:	480e      	ldr	r0, [pc, #56]	@ (8000bf8 <main+0x68>)
 8000bbe:	f002 fb8b 	bl	80032d8 <iprintf>
  	  printf("Device is not ready");
  	  return;
    }
    char buff[4];

    MPU6050_init();
 8000bc2:	f7ff fee3 	bl	800098c <MPU6050_init>
 8000bc6:	e003      	b.n	8000bd0 <main+0x40>
  	  printf("Device is not ready");
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <main+0x6c>)
 8000bca:	f002 fb85 	bl	80032d8 <iprintf>
 8000bce:	e00c      	b.n	8000bea <main+0x5a>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_Gyro(&gyroX,&gyroY,&gyroZ);
 8000bd0:	1d3a      	adds	r2, r7, #4
 8000bd2:	f107 0108 	add.w	r1, r7, #8
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff5c 	bl	8000a98 <MPU6050_Read_Gyro>
	  HAL_Delay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 fa9b 	bl	800111c <HAL_Delay>
	  MPU6050_Read_Gyro(&gyroX,&gyroY,&gyroZ);
 8000be6:	bf00      	nop
 8000be8:	e7f2      	b.n	8000bd0 <main+0x40>
  	  return;
 8000bea:	bf00      	nop
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000008c 	.word	0x2000008c
 8000bf8:	0800406c 	.word	0x0800406c
 8000bfc:	0800407c 	.word	0x0800407c

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	@ 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fbb7 	bl	8003382 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fe90 	bl	800295c <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c42:	f000 f889 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 f8fe 	bl	8002e60 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f875 	bl	8000d58 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	@ 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f000 fcbd 	bl	8001634 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f84a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000008c 	.word	0x2000008c
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <MX_GPIO_Init+0x7c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <MX_GPIO_Init+0x80>)
 8000d2c:	f000 fafe 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d30:	2308      	movs	r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <MX_GPIO_Init+0x80>)
 8000d44:	f000 faf2 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010800 	.word	0x40010800

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_MspInit+0x60>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_MspInit+0x60>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <HAL_I2C_MspInit+0x90>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d132      	bne.n	8000e4e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <HAL_I2C_MspInit+0x98>)
 8000e16:	f000 fa89 	bl	800132c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_I2C_MspInit+0x9c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <HAL_I2C_MspInit+0x9c>)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_I2C_MspInit+0x94>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40010000 	.word	0x40010000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f914 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e00a      	b.n	8000ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbf0      	blt.n	8000ed2 <_read+0x12>
  }

  return len;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e009      	b.n	8000f20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf1      	blt.n	8000f0c <_write+0x12>
  }
  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_close>:

int _close(int file)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f58:	605a      	str	r2, [r3, #4]
  return 0;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f002 fa2c 	bl	8003420 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20005000 	.word	0x20005000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	200000e0 	.word	0x200000e0
 8000ffc:	20000238 	.word	0x20000238

08001000 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff fff8 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001012:	490c      	ldr	r1, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001014:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001028:	4c09      	ldr	r4, [pc, #36]	@ (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 f9f9 	bl	800342c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103a:	f7ff fda9 	bl	8000b90 <main>
  bx lr
 800103e:	4770      	bx	lr
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001048:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 800104c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001050:	20000234 	.word	0x20000234

08001054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x28>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x28>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f92b 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fe76 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f935 	bl	8001312 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c0:	f000 f90b 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x1c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x20>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <HAL_IncTick+0x20>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000008 	.word	0x20000008
 8001104:	200000e4 	.word	0x200000e4

08001108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <HAL_GetTick+0x10>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	200000e4 	.word	0x200000e4

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff fff0 	bl	8001108 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffe0 	bl	8001108 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff49 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	@ 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e169      	b.n	8001614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001340:	2201      	movs	r2, #1
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8158 	bne.w	800160e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a9a      	ldr	r2, [pc, #616]	@ (80015cc <HAL_GPIO_Init+0x2a0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d05e      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001368:	4a98      	ldr	r2, [pc, #608]	@ (80015cc <HAL_GPIO_Init+0x2a0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d875      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800136e:	4a98      	ldr	r2, [pc, #608]	@ (80015d0 <HAL_GPIO_Init+0x2a4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d058      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001374:	4a96      	ldr	r2, [pc, #600]	@ (80015d0 <HAL_GPIO_Init+0x2a4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d86f      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800137a:	4a96      	ldr	r2, [pc, #600]	@ (80015d4 <HAL_GPIO_Init+0x2a8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d052      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001380:	4a94      	ldr	r2, [pc, #592]	@ (80015d4 <HAL_GPIO_Init+0x2a8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d869      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001386:	4a94      	ldr	r2, [pc, #592]	@ (80015d8 <HAL_GPIO_Init+0x2ac>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d04c      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 800138c:	4a92      	ldr	r2, [pc, #584]	@ (80015d8 <HAL_GPIO_Init+0x2ac>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d863      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001392:	4a92      	ldr	r2, [pc, #584]	@ (80015dc <HAL_GPIO_Init+0x2b0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d046      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001398:	4a90      	ldr	r2, [pc, #576]	@ (80015dc <HAL_GPIO_Init+0x2b0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d85d      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d82a      	bhi.n	80013f8 <HAL_GPIO_Init+0xcc>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d859      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 80013a6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ac <HAL_GPIO_Init+0x80>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001401 	.word	0x08001401
 80013b4:	08001413 	.word	0x08001413
 80013b8:	08001455 	.word	0x08001455
 80013bc:	0800145b 	.word	0x0800145b
 80013c0:	0800145b 	.word	0x0800145b
 80013c4:	0800145b 	.word	0x0800145b
 80013c8:	0800145b 	.word	0x0800145b
 80013cc:	0800145b 	.word	0x0800145b
 80013d0:	0800145b 	.word	0x0800145b
 80013d4:	0800145b 	.word	0x0800145b
 80013d8:	0800145b 	.word	0x0800145b
 80013dc:	0800145b 	.word	0x0800145b
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	0800145b 	.word	0x0800145b
 80013ec:	0800145b 	.word	0x0800145b
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800141d 	.word	0x0800141d
 80013f8:	4a79      	ldr	r2, [pc, #484]	@ (80015e0 <HAL_GPIO_Init+0x2b4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e02c      	b.n	800145a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e029      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	3304      	adds	r3, #4
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e024      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	3308      	adds	r3, #8
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e01f      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	330c      	adds	r3, #12
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e01a      	b.n	800145c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142e:	2304      	movs	r3, #4
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e013      	b.n	800145c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
          break;
 8001446:	e009      	b.n	800145c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	615a      	str	r2, [r3, #20]
          break;
 8001452:	e003      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x130>
          break;
 800145a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	@ 0xff
 8001460:	d801      	bhi.n	8001466 <HAL_GPIO_Init+0x13a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e001      	b.n	800146a <HAL_GPIO_Init+0x13e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2bff      	cmp	r3, #255	@ 0xff
 8001470:	d802      	bhi.n	8001478 <HAL_GPIO_Init+0x14c>
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x152>
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	3b08      	subs	r3, #8
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	210f      	movs	r1, #15
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	6a39      	ldr	r1, [r7, #32]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80b1 	beq.w	800160e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ac:	4b4d      	ldr	r3, [pc, #308]	@ (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c4:	4a48      	ldr	r2, [pc, #288]	@ (80015e8 <HAL_GPIO_Init+0x2bc>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a40      	ldr	r2, [pc, #256]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d013      	beq.n	8001518 <HAL_GPIO_Init+0x1ec>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3f      	ldr	r2, [pc, #252]	@ (80015f0 <HAL_GPIO_Init+0x2c4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00d      	beq.n	8001514 <HAL_GPIO_Init+0x1e8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <HAL_GPIO_Init+0x2c8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3d      	ldr	r2, [pc, #244]	@ (80015f8 <HAL_GPIO_Init+0x2cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_GPIO_Init+0x1e0>
 8001508:	2303      	movs	r3, #3
 800150a:	e006      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 800150c:	2304      	movs	r3, #4
 800150e:	e004      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001510:	2302      	movs	r3, #2
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001518:	2300      	movs	r3, #0
 800151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4093      	lsls	r3, r2
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152a:	492f      	ldr	r1, [pc, #188]	@ (80015e8 <HAL_GPIO_Init+0x2bc>)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001544:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	492c      	ldr	r1, [pc, #176]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001552:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4928      	ldr	r1, [pc, #160]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 800155c:	4013      	ands	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4922      	ldr	r1, [pc, #136]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	491e      	ldr	r1, [pc, #120]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 8001584:	4013      	ands	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4918      	ldr	r1, [pc, #96]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4914      	ldr	r1, [pc, #80]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d021      	beq.n	8001600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	@ (80015fc <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e021      	b.n	800160e <HAL_GPIO_Init+0x2e2>
 80015ca:	bf00      	nop
 80015cc:	10320000 	.word	0x10320000
 80015d0:	10310000 	.word	0x10310000
 80015d4:	10220000 	.word	0x10220000
 80015d8:	10210000 	.word	0x10210000
 80015dc:	10120000 	.word	0x10120000
 80015e0:	10110000 	.word	0x10110000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40011400 	.word	0x40011400
 80015fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_GPIO_Init+0x304>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4909      	ldr	r1, [pc, #36]	@ (8001630 <HAL_GPIO_Init+0x304>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f47f ae8e 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	372c      	adds	r7, #44	@ 0x2c
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e12b      	b.n	800189e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fbb4 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	@ 0x24
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001698:	f001 fd2a 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 800169c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a81      	ldr	r2, [pc, #516]	@ (80018a8 <HAL_I2C_Init+0x274>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d807      	bhi.n	80016b8 <HAL_I2C_Init+0x84>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a80      	ldr	r2, [pc, #512]	@ (80018ac <HAL_I2C_Init+0x278>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e006      	b.n	80016c6 <HAL_I2C_Init+0x92>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a7d      	ldr	r2, [pc, #500]	@ (80018b0 <HAL_I2C_Init+0x27c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e7      	b.n	800189e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a78      	ldr	r2, [pc, #480]	@ (80018b4 <HAL_I2C_Init+0x280>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a6a      	ldr	r2, [pc, #424]	@ (80018a8 <HAL_I2C_Init+0x274>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d802      	bhi.n	8001708 <HAL_I2C_Init+0xd4>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	e009      	b.n	800171c <HAL_I2C_Init+0xe8>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a69      	ldr	r2, [pc, #420]	@ (80018b8 <HAL_I2C_Init+0x284>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	3301      	adds	r3, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800172e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	495c      	ldr	r1, [pc, #368]	@ (80018a8 <HAL_I2C_Init+0x274>)
 8001738:	428b      	cmp	r3, r1
 800173a:	d819      	bhi.n	8001770 <HAL_I2C_Init+0x13c>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e59      	subs	r1, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fbb1 f3f3 	udiv	r3, r1, r3
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001750:	400b      	ands	r3, r1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_I2C_Init+0x138>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e59      	subs	r1, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fbb1 f3f3 	udiv	r3, r1, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	e051      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 800176c:	2304      	movs	r3, #4
 800176e:	e04f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <HAL_I2C_Init+0x168>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e012      	b.n	80017c2 <HAL_I2C_Init+0x18e>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x196>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e022      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10e      	bne.n	80017f0 <HAL_I2C_Init+0x1bc>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e58      	subs	r0, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ee:	e00f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	6809      	ldr	r1, [r1, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800183e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6911      	ldr	r1, [r2, #16]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68d2      	ldr	r2, [r2, #12]
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	000186a0 	.word	0x000186a0
 80018ac:	001e847f 	.word	0x001e847f
 80018b0:	003d08ff 	.word	0x003d08ff
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	817b      	strh	r3, [r7, #10]
 80018ce:	460b      	mov	r3, r1
 80018d0:	813b      	strh	r3, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d6:	f7ff fc17 	bl	8001108 <HAL_GetTick>
 80018da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	f040 80d9 	bne.w	8001a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	496d      	ldr	r1, [pc, #436]	@ (8001aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fdfb 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
 8001902:	e0cc      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Mem_Write+0x56>
 800190e:	2302      	movs	r3, #2
 8001910:	e0c5      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d007      	beq.n	8001938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2221      	movs	r2, #33	@ 0x21
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a4d      	ldr	r2, [pc, #308]	@ (8001aac <HAL_I2C_Mem_Write+0x1f0>)
 8001978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800197a:	88f8      	ldrh	r0, [r7, #6]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	8979      	ldrh	r1, [r7, #10]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4603      	mov	r3, r0
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fc32 	bl	80021f4 <I2C_RequestMemoryWrite>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d052      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e081      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fec0 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06b      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d11b      	bne.n	8001a3c <HAL_I2C_Mem_Write+0x180>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d017      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1aa      	bne.n	800199a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 feb3 	bl	80027b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e016      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	00100002 	.word	0x00100002
 8001aac:	ffff0000 	.word	0xffff0000

08001ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	@ 0x30
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ace:	f7ff fb1b 	bl	8001108 <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	f040 8250 	bne.w	8001f82 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2319      	movs	r3, #25
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4982      	ldr	r1, [pc, #520]	@ (8001cf4 <HAL_I2C_Mem_Read+0x244>)
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fcff 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
 8001afa:	e243      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Mem_Read+0x5a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e23c      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d007      	beq.n	8001b30 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2222      	movs	r2, #34	@ 0x22
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2240      	movs	r2, #64	@ 0x40
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a62      	ldr	r2, [pc, #392]	@ (8001cf8 <HAL_I2C_Mem_Read+0x248>)
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b72:	88f8      	ldrh	r0, [r7, #6]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	4603      	mov	r3, r0
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fbcc 	bl	8002320 <I2C_RequestMemoryRead>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1f8      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d113      	bne.n	8001bc2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e1cc      	b.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d11e      	bne.n	8001c08 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bda:	b672      	cpsid	i
}
 8001bdc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c04:	b662      	cpsie	i
}
 8001c06:	e035      	b.n	8001c74 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d11e      	bne.n	8001c4e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c4a:	b662      	cpsie	i
}
 8001c4c:	e012      	b.n	8001c74 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c74:	e172      	b.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	f200 811f 	bhi.w	8001ebe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d123      	bne.n	8001cd0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 fdd9 	bl	8002844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e173      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cce:	e145      	b.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d152      	bne.n	8001d7e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4906      	ldr	r1, [pc, #24]	@ (8001cfc <HAL_I2C_Mem_Read+0x24c>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fc04 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e148      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
 8001cf2:	bf00      	nop
 8001cf4:	00100002 	.word	0x00100002
 8001cf8:	ffff0000 	.word	0xffff0000
 8001cfc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d46:	b662      	cpsie	i
}
 8001d48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d7c:	e0ee      	b.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d84:	2200      	movs	r2, #0
 8001d86:	4981      	ldr	r1, [pc, #516]	@ (8001f8c <HAL_I2C_Mem_Read+0x4dc>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fbb1 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0f5      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dde:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <HAL_I2C_Mem_Read+0x4e0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f94 <HAL_I2C_Mem_Read+0x4e4>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a1a      	lsrs	r2, r3, #8
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00da      	lsls	r2, r3, #3
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d118      	bne.n	8001e36 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f043 0220 	orr.w	r2, r3, #32
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e26:	b662      	cpsie	i
}
 8001e28:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0a6      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d1d9      	bne.n	8001df8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e86:	b662      	cpsie	i
}
 8001e88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ebc:	e04e      	b.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fcbe 	bl	8002844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e058      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d124      	bne.n	8001f5c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f ae88 	bne.w	8001c76 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	00010004 	.word	0x00010004
 8001f90:	20000000 	.word	0x20000000
 8001f94:	14f8b589 	.word	0x14f8b589

08001f98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff f8ae 	bl	8001108 <HAL_GetTick>
 8001fac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 8111 	bne.w	80021e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4988      	ldr	r1, [pc, #544]	@ (80021ec <HAL_I2C_IsDeviceReady+0x254>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fa90 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e104      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_IsDeviceReady+0x50>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0fd      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d007      	beq.n	800200e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800201c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2224      	movs	r2, #36	@ 0x24
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a70      	ldr	r2, [pc, #448]	@ (80021f0 <HAL_I2C_IsDeviceReady+0x258>)
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002040:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fa4e 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002068:	d103      	bne.n	8002072 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002070:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0b6      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002084:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff f83f 	bl	8001108 <HAL_GetTick>
 800208a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b0:	bf0c      	ite	eq
 80020b2:	2301      	moveq	r3, #1
 80020b4:	2300      	movne	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ba:	e025      	b.n	8002108 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020bc:	f7ff f824 	bl	8001108 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d302      	bcc.n	80020d2 <HAL_I2C_IsDeviceReady+0x13a>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22a0      	movs	r2, #160	@ 0xa0
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2ba0      	cmp	r3, #160	@ 0xa0
 8002112:	d005      	beq.n	8002120 <HAL_I2C_IsDeviceReady+0x188>
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_I2C_IsDeviceReady+0x188>
 800211a:	7dbb      	ldrb	r3, [r7, #22]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0cd      	beq.n	80020bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d129      	bne.n	800218a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002144:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2319      	movs	r3, #25
 8002162:	2201      	movs	r2, #1
 8002164:	4921      	ldr	r1, [pc, #132]	@ (80021ec <HAL_I2C_IsDeviceReady+0x254>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9c2 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e036      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e02c      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002198:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2319      	movs	r3, #25
 80021aa:	2201      	movs	r2, #1
 80021ac:	490f      	ldr	r1, [pc, #60]	@ (80021ec <HAL_I2C_IsDeviceReady+0x254>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f99e 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e012      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f4ff af32 	bcc.w	8002032 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	00100002 	.word	0x00100002
 80021f0:	ffff0000 	.word	0xffff0000

080021f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2200      	movs	r2, #0
 8002226:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f960 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002244:	d103      	bne.n	800224e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e05f      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	492d      	ldr	r1, [pc, #180]	@ (800231c <I2C_RequestMemoryWrite+0x128>)
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9bb 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04c      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa46 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d107      	bne.n	80022b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02b      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e021      	b.n	8002310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa20 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d107      	bne.n	8002302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e005      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	00010002 	.word	0x00010002

08002320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	460b      	mov	r3, r1
 8002334:	813b      	strh	r3, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2200      	movs	r2, #0
 8002362:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f8c2 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002380:	d103      	bne.n	800238a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0aa      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800238e:	897b      	ldrh	r3, [r7, #10]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800239c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	4952      	ldr	r1, [pc, #328]	@ (80024ec <I2C_RequestMemoryRead+0x1cc>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f91d 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e097      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f9a8 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e076      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023fc:	893b      	ldrh	r3, [r7, #8]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	e021      	b.n	800244c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002408:	893b      	ldrh	r3, [r7, #8]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29b      	uxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f982 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e050      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244e:	6a39      	ldr	r1, [r7, #32]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f967 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002472:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e035      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002486:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2200      	movs	r2, #0
 8002490:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f82b 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ae:	d103      	bne.n	80024b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e013      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	6a3a      	ldr	r2, [r7, #32]
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <I2C_RequestMemoryRead+0x1cc>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f886 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00010002 	.word	0x00010002

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e048      	b.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002508:	d044      	beq.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe fdfd 	bl	8001108 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d139      	bne.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10d      	bne.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x56>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	43da      	mvns	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	e00c      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	43da      	mvns	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	429a      	cmp	r2, r3
 8002564:	d116      	bne.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e023      	b.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10d      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	43da      	mvns	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	e00c      	b.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d093      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f2:	e071      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002602:	d123      	bne.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002612:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800261c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e067      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002652:	d041      	beq.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fe fd58 	bl	8001108 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d136      	bne.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10c      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e00b      	b.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	43da      	mvns	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4013      	ands	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e021      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10c      	bne.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e00b      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f af6d 	bne.w	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	e034      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8e3 	bl	80028fe <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e034      	b.n	80027ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002748:	d028      	beq.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fcdd 	bl	8001108 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11d      	bne.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276a:	2b80      	cmp	r3, #128	@ 0x80
 800276c:	d016      	beq.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d1c3      	bne.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c0:	e034      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f89b 	bl	80028fe <I2C_IsAcknowledgeFailed>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e034      	b.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d8:	d028      	beq.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fc95 	bl	8001108 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d016      	beq.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e007      	b.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d1c3      	bne.n	80027c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002850:	e049      	b.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b10      	cmp	r3, #16
 800285e:	d119      	bne.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0210 	mvn.w	r2, #16
 8002868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e030      	b.n	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe fc38 	bl	8001108 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d016      	beq.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e007      	b.n	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d1ae      	bne.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002914:	d11b      	bne.n	800294e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800291e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
	...

0800295c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e272      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297c:	4b92      	ldr	r3, [pc, #584]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002988:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d112      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
 8002994:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b89      	ldr	r3, [pc, #548]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x12c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d168      	bne.n	8002a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e24c      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x76>
 80029c4:	4b80      	ldr	r3, [pc, #512]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x98>
 80029da:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7a      	ldr	r2, [pc, #488]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b78      	ldr	r3, [pc, #480]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a77      	ldr	r2, [pc, #476]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0xbc>
 80029fe:	4b72      	ldr	r3, [pc, #456]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a71      	ldr	r2, [pc, #452]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 8002a18:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb66 	bl	8001108 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fb62 	bl	8001108 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e200      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe4>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fb52 	bl	8001108 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fb4e 	bl	8001108 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1ec      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b53      	ldr	r3, [pc, #332]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x10c>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa2:	4b49      	ldr	r3, [pc, #292]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x18c>
 8002aae:	4b46      	ldr	r3, [pc, #280]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b43      	ldr	r3, [pc, #268]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x176>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1c0      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4939      	ldr	r1, [pc, #228]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b36      	ldr	r3, [pc, #216]	@ (8002bcc <HAL_RCC_OscConfig+0x270>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fb07 	bl	8001108 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe fb03 	bl	8001108 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1a1      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4927      	ldr	r1, [pc, #156]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <HAL_RCC_OscConfig+0x270>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fae6 	bl	8001108 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fe fae2 	bl	8001108 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e180      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03a      	beq.n	8002be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d019      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fac6 	bl	8001108 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe fac2 	bl	8001108 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e160      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 faba 	bl	8003118 <RCC_Delay>
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe faac 	bl	8001108 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe faa8 	bl	8001108 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e146      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	42420000 	.word	0x42420000
 8002bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b92      	ldr	r3, [pc, #584]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e9      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a6 	beq.w	8002d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a87      	ldr	r2, [pc, #540]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b82      	ldr	r3, [pc, #520]	@ (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b7f      	ldr	r3, [pc, #508]	@ (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fa69 	bl	8001108 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fa65 	bl	8001108 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	@ 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e103      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x312>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e02d      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x334>
 8002c76:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a69      	ldr	r2, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6213      	str	r3, [r2, #32]
 8002c82:	4b67      	ldr	r3, [pc, #412]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a66      	ldr	r2, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x356>
 8002c98:	4b61      	ldr	r3, [pc, #388]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a60      	ldr	r2, [pc, #384]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b58      	ldr	r3, [pc, #352]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a57      	ldr	r2, [pc, #348]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d015      	beq.n	8002cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fa19 	bl	8001108 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fa15 	bl	8001108 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0b1      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ee      	beq.n	8002cda <HAL_RCC_OscConfig+0x37e>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fa03 	bl	8001108 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe f9ff 	bl	8001108 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e09b      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a3b      	ldr	r2, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8087 	beq.w	8002e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d44:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d061      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d146      	bne.n	8002de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b33      	ldr	r3, [pc, #204]	@ (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f9d3 	bl	8001108 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe f9cf 	bl	8001108 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e06d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4921      	ldr	r1, [pc, #132]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a19      	ldr	r1, [r3, #32]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	430b      	orrs	r3, r1
 8002db2:	491b      	ldr	r1, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe f9a3 	bl	8001108 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe f99f 	bl	8001108 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e03d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd8:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x46a>
 8002de4:	e035      	b.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe f98c 	bl	8001108 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f988 	bl	8001108 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e026      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x498>
 8002e12:	e01e      	b.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e019      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_OscConfig+0x500>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b67      	ldr	r3, [pc, #412]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4965      	ldr	r1, [pc, #404]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b39      	ldr	r3, [pc, #228]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4936      	ldr	r1, [pc, #216]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe f8da 	bl	8001108 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe f8d6 	bl	8001108 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e053      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0207 	bic.w	r2, r3, #7
 8002f96:	4922      	ldr	r1, [pc, #136]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	@ (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	@ (800302c <HAL_RCC_ClockConfig+0x1cc>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f838 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	08004090 	.word	0x08004090
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800304e:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b04      	cmp	r3, #4
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x30>
 800305e:	2b08      	cmp	r3, #8
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x36>
 8003062:	e027      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003066:	613b      	str	r3, [r7, #16]
      break;
 8003068:	e027      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	0c9b      	lsrs	r3, r3, #18
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	4a17      	ldr	r2, [pc, #92]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003074:	5cd3      	ldrb	r3, [r2, r3]
 8003076:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003082:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0c5b      	lsrs	r3, r3, #17
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	4a11      	ldr	r2, [pc, #68]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003096:	fb03 f202 	mul.w	r2, r3, r2
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	e004      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	613b      	str	r3, [r7, #16]
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x98>)
 80030b6:	613b      	str	r3, [r7, #16]
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	693b      	ldr	r3, [r7, #16]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	007a1200 	.word	0x007a1200
 80030d0:	080040a8 	.word	0x080040a8
 80030d4:	080040b8 	.word	0x080040b8
 80030d8:	003d0900 	.word	0x003d0900

080030dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b02      	ldr	r3, [pc, #8]	@ (80030ec <HAL_RCC_GetHCLKFreq+0x10>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	20000000 	.word	0x20000000

080030f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f4:	f7ff fff2 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4903      	ldr	r1, [pc, #12]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	080040a0 	.word	0x080040a0

08003118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <RCC_Delay+0x34>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <RCC_Delay+0x38>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0a5b      	lsrs	r3, r3, #9
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003134:	bf00      	nop
  }
  while (Delay --);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	60fa      	str	r2, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f9      	bne.n	8003134 <RCC_Delay+0x1c>
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000000 	.word	0x20000000
 8003150:	10624dd3 	.word	0x10624dd3

08003154 <std>:
 8003154:	2300      	movs	r3, #0
 8003156:	b510      	push	{r4, lr}
 8003158:	4604      	mov	r4, r0
 800315a:	e9c0 3300 	strd	r3, r3, [r0]
 800315e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003162:	6083      	str	r3, [r0, #8]
 8003164:	8181      	strh	r1, [r0, #12]
 8003166:	6643      	str	r3, [r0, #100]	@ 0x64
 8003168:	81c2      	strh	r2, [r0, #14]
 800316a:	6183      	str	r3, [r0, #24]
 800316c:	4619      	mov	r1, r3
 800316e:	2208      	movs	r2, #8
 8003170:	305c      	adds	r0, #92	@ 0x5c
 8003172:	f000 f906 	bl	8003382 <memset>
 8003176:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <std+0x58>)
 8003178:	6224      	str	r4, [r4, #32]
 800317a:	6263      	str	r3, [r4, #36]	@ 0x24
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <std+0x5c>)
 800317e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <std+0x60>)
 8003182:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003184:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <std+0x64>)
 8003186:	6323      	str	r3, [r4, #48]	@ 0x30
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <std+0x68>)
 800318a:	429c      	cmp	r4, r3
 800318c:	d006      	beq.n	800319c <std+0x48>
 800318e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003192:	4294      	cmp	r4, r2
 8003194:	d002      	beq.n	800319c <std+0x48>
 8003196:	33d0      	adds	r3, #208	@ 0xd0
 8003198:	429c      	cmp	r4, r3
 800319a:	d105      	bne.n	80031a8 <std+0x54>
 800319c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a4:	f000 b966 	b.w	8003474 <__retarget_lock_init_recursive>
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	bf00      	nop
 80031ac:	080032fd 	.word	0x080032fd
 80031b0:	0800331f 	.word	0x0800331f
 80031b4:	08003357 	.word	0x08003357
 80031b8:	0800337b 	.word	0x0800337b
 80031bc:	200000e8 	.word	0x200000e8

080031c0 <stdio_exit_handler>:
 80031c0:	4a02      	ldr	r2, [pc, #8]	@ (80031cc <stdio_exit_handler+0xc>)
 80031c2:	4903      	ldr	r1, [pc, #12]	@ (80031d0 <stdio_exit_handler+0x10>)
 80031c4:	4803      	ldr	r0, [pc, #12]	@ (80031d4 <stdio_exit_handler+0x14>)
 80031c6:	f000 b869 	b.w	800329c <_fwalk_sglue>
 80031ca:	bf00      	nop
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	08003d0d 	.word	0x08003d0d
 80031d4:	2000001c 	.word	0x2000001c

080031d8 <cleanup_stdio>:
 80031d8:	6841      	ldr	r1, [r0, #4]
 80031da:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <cleanup_stdio+0x34>)
 80031dc:	b510      	push	{r4, lr}
 80031de:	4299      	cmp	r1, r3
 80031e0:	4604      	mov	r4, r0
 80031e2:	d001      	beq.n	80031e8 <cleanup_stdio+0x10>
 80031e4:	f000 fd92 	bl	8003d0c <_fflush_r>
 80031e8:	68a1      	ldr	r1, [r4, #8]
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <cleanup_stdio+0x38>)
 80031ec:	4299      	cmp	r1, r3
 80031ee:	d002      	beq.n	80031f6 <cleanup_stdio+0x1e>
 80031f0:	4620      	mov	r0, r4
 80031f2:	f000 fd8b 	bl	8003d0c <_fflush_r>
 80031f6:	68e1      	ldr	r1, [r4, #12]
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <cleanup_stdio+0x3c>)
 80031fa:	4299      	cmp	r1, r3
 80031fc:	d004      	beq.n	8003208 <cleanup_stdio+0x30>
 80031fe:	4620      	mov	r0, r4
 8003200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003204:	f000 bd82 	b.w	8003d0c <_fflush_r>
 8003208:	bd10      	pop	{r4, pc}
 800320a:	bf00      	nop
 800320c:	200000e8 	.word	0x200000e8
 8003210:	20000150 	.word	0x20000150
 8003214:	200001b8 	.word	0x200001b8

08003218 <global_stdio_init.part.0>:
 8003218:	b510      	push	{r4, lr}
 800321a:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <global_stdio_init.part.0+0x30>)
 800321c:	4c0b      	ldr	r4, [pc, #44]	@ (800324c <global_stdio_init.part.0+0x34>)
 800321e:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <global_stdio_init.part.0+0x38>)
 8003220:	4620      	mov	r0, r4
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	2104      	movs	r1, #4
 8003226:	2200      	movs	r2, #0
 8003228:	f7ff ff94 	bl	8003154 <std>
 800322c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003230:	2201      	movs	r2, #1
 8003232:	2109      	movs	r1, #9
 8003234:	f7ff ff8e 	bl	8003154 <std>
 8003238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800323c:	2202      	movs	r2, #2
 800323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003242:	2112      	movs	r1, #18
 8003244:	f7ff bf86 	b.w	8003154 <std>
 8003248:	20000220 	.word	0x20000220
 800324c:	200000e8 	.word	0x200000e8
 8003250:	080031c1 	.word	0x080031c1

08003254 <__sfp_lock_acquire>:
 8003254:	4801      	ldr	r0, [pc, #4]	@ (800325c <__sfp_lock_acquire+0x8>)
 8003256:	f000 b90e 	b.w	8003476 <__retarget_lock_acquire_recursive>
 800325a:	bf00      	nop
 800325c:	20000229 	.word	0x20000229

08003260 <__sfp_lock_release>:
 8003260:	4801      	ldr	r0, [pc, #4]	@ (8003268 <__sfp_lock_release+0x8>)
 8003262:	f000 b909 	b.w	8003478 <__retarget_lock_release_recursive>
 8003266:	bf00      	nop
 8003268:	20000229 	.word	0x20000229

0800326c <__sinit>:
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
 8003270:	f7ff fff0 	bl	8003254 <__sfp_lock_acquire>
 8003274:	6a23      	ldr	r3, [r4, #32]
 8003276:	b11b      	cbz	r3, 8003280 <__sinit+0x14>
 8003278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800327c:	f7ff bff0 	b.w	8003260 <__sfp_lock_release>
 8003280:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <__sinit+0x28>)
 8003282:	6223      	str	r3, [r4, #32]
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <__sinit+0x2c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f5      	bne.n	8003278 <__sinit+0xc>
 800328c:	f7ff ffc4 	bl	8003218 <global_stdio_init.part.0>
 8003290:	e7f2      	b.n	8003278 <__sinit+0xc>
 8003292:	bf00      	nop
 8003294:	080031d9 	.word	0x080031d9
 8003298:	20000220 	.word	0x20000220

0800329c <_fwalk_sglue>:
 800329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032a0:	4607      	mov	r7, r0
 80032a2:	4688      	mov	r8, r1
 80032a4:	4614      	mov	r4, r2
 80032a6:	2600      	movs	r6, #0
 80032a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ac:	f1b9 0901 	subs.w	r9, r9, #1
 80032b0:	d505      	bpl.n	80032be <_fwalk_sglue+0x22>
 80032b2:	6824      	ldr	r4, [r4, #0]
 80032b4:	2c00      	cmp	r4, #0
 80032b6:	d1f7      	bne.n	80032a8 <_fwalk_sglue+0xc>
 80032b8:	4630      	mov	r0, r6
 80032ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032be:	89ab      	ldrh	r3, [r5, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d907      	bls.n	80032d4 <_fwalk_sglue+0x38>
 80032c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032c8:	3301      	adds	r3, #1
 80032ca:	d003      	beq.n	80032d4 <_fwalk_sglue+0x38>
 80032cc:	4629      	mov	r1, r5
 80032ce:	4638      	mov	r0, r7
 80032d0:	47c0      	blx	r8
 80032d2:	4306      	orrs	r6, r0
 80032d4:	3568      	adds	r5, #104	@ 0x68
 80032d6:	e7e9      	b.n	80032ac <_fwalk_sglue+0x10>

080032d8 <iprintf>:
 80032d8:	b40f      	push	{r0, r1, r2, r3}
 80032da:	b507      	push	{r0, r1, r2, lr}
 80032dc:	4906      	ldr	r1, [pc, #24]	@ (80032f8 <iprintf+0x20>)
 80032de:	ab04      	add	r3, sp, #16
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e6:	6881      	ldr	r1, [r0, #8]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	f000 f9e5 	bl	80036b8 <_vfiprintf_r>
 80032ee:	b003      	add	sp, #12
 80032f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032f4:	b004      	add	sp, #16
 80032f6:	4770      	bx	lr
 80032f8:	20000018 	.word	0x20000018

080032fc <__sread>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	460c      	mov	r4, r1
 8003300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003304:	f000 f868 	bl	80033d8 <_read_r>
 8003308:	2800      	cmp	r0, #0
 800330a:	bfab      	itete	ge
 800330c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800330e:	89a3      	ldrhlt	r3, [r4, #12]
 8003310:	181b      	addge	r3, r3, r0
 8003312:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003316:	bfac      	ite	ge
 8003318:	6563      	strge	r3, [r4, #84]	@ 0x54
 800331a:	81a3      	strhlt	r3, [r4, #12]
 800331c:	bd10      	pop	{r4, pc}

0800331e <__swrite>:
 800331e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003322:	461f      	mov	r7, r3
 8003324:	898b      	ldrh	r3, [r1, #12]
 8003326:	4605      	mov	r5, r0
 8003328:	05db      	lsls	r3, r3, #23
 800332a:	460c      	mov	r4, r1
 800332c:	4616      	mov	r6, r2
 800332e:	d505      	bpl.n	800333c <__swrite+0x1e>
 8003330:	2302      	movs	r3, #2
 8003332:	2200      	movs	r2, #0
 8003334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003338:	f000 f83c 	bl	80033b4 <_lseek_r>
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	4632      	mov	r2, r6
 8003340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003344:	81a3      	strh	r3, [r4, #12]
 8003346:	4628      	mov	r0, r5
 8003348:	463b      	mov	r3, r7
 800334a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800334e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003352:	f000 b853 	b.w	80033fc <_write_r>

08003356 <__sseek>:
 8003356:	b510      	push	{r4, lr}
 8003358:	460c      	mov	r4, r1
 800335a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800335e:	f000 f829 	bl	80033b4 <_lseek_r>
 8003362:	1c43      	adds	r3, r0, #1
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	bf15      	itete	ne
 8003368:	6560      	strne	r0, [r4, #84]	@ 0x54
 800336a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800336e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003372:	81a3      	strheq	r3, [r4, #12]
 8003374:	bf18      	it	ne
 8003376:	81a3      	strhne	r3, [r4, #12]
 8003378:	bd10      	pop	{r4, pc}

0800337a <__sclose>:
 800337a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337e:	f000 b809 	b.w	8003394 <_close_r>

08003382 <memset>:
 8003382:	4603      	mov	r3, r0
 8003384:	4402      	add	r2, r0
 8003386:	4293      	cmp	r3, r2
 8003388:	d100      	bne.n	800338c <memset+0xa>
 800338a:	4770      	bx	lr
 800338c:	f803 1b01 	strb.w	r1, [r3], #1
 8003390:	e7f9      	b.n	8003386 <memset+0x4>
	...

08003394 <_close_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	2300      	movs	r3, #0
 8003398:	4d05      	ldr	r5, [pc, #20]	@ (80033b0 <_close_r+0x1c>)
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	f7fd fdc7 	bl	8000f32 <_close>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_close_r+0x1a>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_close_r+0x1a>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20000224 	.word	0x20000224

080033b4 <_lseek_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4604      	mov	r4, r0
 80033b8:	4608      	mov	r0, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	4d05      	ldr	r5, [pc, #20]	@ (80033d4 <_lseek_r+0x20>)
 80033c0:	602a      	str	r2, [r5, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f7fd fdd9 	bl	8000f7a <_lseek>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_lseek_r+0x1e>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_lseek_r+0x1e>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000224 	.word	0x20000224

080033d8 <_read_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	4d05      	ldr	r5, [pc, #20]	@ (80033f8 <_read_r+0x20>)
 80033e4:	602a      	str	r2, [r5, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7fd fd6a 	bl	8000ec0 <_read>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_read_r+0x1e>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_read_r+0x1e>
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	20000224 	.word	0x20000224

080033fc <_write_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	2200      	movs	r2, #0
 8003406:	4d05      	ldr	r5, [pc, #20]	@ (800341c <_write_r+0x20>)
 8003408:	602a      	str	r2, [r5, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f7fd fd75 	bl	8000efa <_write>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_write_r+0x1e>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	b103      	cbz	r3, 800341a <_write_r+0x1e>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000224 	.word	0x20000224

08003420 <__errno>:
 8003420:	4b01      	ldr	r3, [pc, #4]	@ (8003428 <__errno+0x8>)
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000018 	.word	0x20000018

0800342c <__libc_init_array>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	2600      	movs	r6, #0
 8003430:	4d0c      	ldr	r5, [pc, #48]	@ (8003464 <__libc_init_array+0x38>)
 8003432:	4c0d      	ldr	r4, [pc, #52]	@ (8003468 <__libc_init_array+0x3c>)
 8003434:	1b64      	subs	r4, r4, r5
 8003436:	10a4      	asrs	r4, r4, #2
 8003438:	42a6      	cmp	r6, r4
 800343a:	d109      	bne.n	8003450 <__libc_init_array+0x24>
 800343c:	f000 fdc4 	bl	8003fc8 <_init>
 8003440:	2600      	movs	r6, #0
 8003442:	4d0a      	ldr	r5, [pc, #40]	@ (800346c <__libc_init_array+0x40>)
 8003444:	4c0a      	ldr	r4, [pc, #40]	@ (8003470 <__libc_init_array+0x44>)
 8003446:	1b64      	subs	r4, r4, r5
 8003448:	10a4      	asrs	r4, r4, #2
 800344a:	42a6      	cmp	r6, r4
 800344c:	d105      	bne.n	800345a <__libc_init_array+0x2e>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	f855 3b04 	ldr.w	r3, [r5], #4
 8003454:	4798      	blx	r3
 8003456:	3601      	adds	r6, #1
 8003458:	e7ee      	b.n	8003438 <__libc_init_array+0xc>
 800345a:	f855 3b04 	ldr.w	r3, [r5], #4
 800345e:	4798      	blx	r3
 8003460:	3601      	adds	r6, #1
 8003462:	e7f2      	b.n	800344a <__libc_init_array+0x1e>
 8003464:	080040f0 	.word	0x080040f0
 8003468:	080040f0 	.word	0x080040f0
 800346c:	080040f0 	.word	0x080040f0
 8003470:	080040f4 	.word	0x080040f4

08003474 <__retarget_lock_init_recursive>:
 8003474:	4770      	bx	lr

08003476 <__retarget_lock_acquire_recursive>:
 8003476:	4770      	bx	lr

08003478 <__retarget_lock_release_recursive>:
 8003478:	4770      	bx	lr
	...

0800347c <_free_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4605      	mov	r5, r0
 8003480:	2900      	cmp	r1, #0
 8003482:	d040      	beq.n	8003506 <_free_r+0x8a>
 8003484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003488:	1f0c      	subs	r4, r1, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfb8      	it	lt
 800348e:	18e4      	addlt	r4, r4, r3
 8003490:	f000 f8de 	bl	8003650 <__malloc_lock>
 8003494:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <_free_r+0x8c>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	b933      	cbnz	r3, 80034a8 <_free_r+0x2c>
 800349a:	6063      	str	r3, [r4, #4]
 800349c:	6014      	str	r4, [r2, #0]
 800349e:	4628      	mov	r0, r5
 80034a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034a4:	f000 b8da 	b.w	800365c <__malloc_unlock>
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d908      	bls.n	80034be <_free_r+0x42>
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	1821      	adds	r1, r4, r0
 80034b0:	428b      	cmp	r3, r1
 80034b2:	bf01      	itttt	eq
 80034b4:	6819      	ldreq	r1, [r3, #0]
 80034b6:	685b      	ldreq	r3, [r3, #4]
 80034b8:	1809      	addeq	r1, r1, r0
 80034ba:	6021      	streq	r1, [r4, #0]
 80034bc:	e7ed      	b.n	800349a <_free_r+0x1e>
 80034be:	461a      	mov	r2, r3
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	b10b      	cbz	r3, 80034c8 <_free_r+0x4c>
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	d9fa      	bls.n	80034be <_free_r+0x42>
 80034c8:	6811      	ldr	r1, [r2, #0]
 80034ca:	1850      	adds	r0, r2, r1
 80034cc:	42a0      	cmp	r0, r4
 80034ce:	d10b      	bne.n	80034e8 <_free_r+0x6c>
 80034d0:	6820      	ldr	r0, [r4, #0]
 80034d2:	4401      	add	r1, r0
 80034d4:	1850      	adds	r0, r2, r1
 80034d6:	4283      	cmp	r3, r0
 80034d8:	6011      	str	r1, [r2, #0]
 80034da:	d1e0      	bne.n	800349e <_free_r+0x22>
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4408      	add	r0, r1
 80034e2:	6010      	str	r0, [r2, #0]
 80034e4:	6053      	str	r3, [r2, #4]
 80034e6:	e7da      	b.n	800349e <_free_r+0x22>
 80034e8:	d902      	bls.n	80034f0 <_free_r+0x74>
 80034ea:	230c      	movs	r3, #12
 80034ec:	602b      	str	r3, [r5, #0]
 80034ee:	e7d6      	b.n	800349e <_free_r+0x22>
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	1821      	adds	r1, r4, r0
 80034f4:	428b      	cmp	r3, r1
 80034f6:	bf01      	itttt	eq
 80034f8:	6819      	ldreq	r1, [r3, #0]
 80034fa:	685b      	ldreq	r3, [r3, #4]
 80034fc:	1809      	addeq	r1, r1, r0
 80034fe:	6021      	streq	r1, [r4, #0]
 8003500:	6063      	str	r3, [r4, #4]
 8003502:	6054      	str	r4, [r2, #4]
 8003504:	e7cb      	b.n	800349e <_free_r+0x22>
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	20000230 	.word	0x20000230

0800350c <sbrk_aligned>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4e0f      	ldr	r6, [pc, #60]	@ (800354c <sbrk_aligned+0x40>)
 8003510:	460c      	mov	r4, r1
 8003512:	6831      	ldr	r1, [r6, #0]
 8003514:	4605      	mov	r5, r0
 8003516:	b911      	cbnz	r1, 800351e <sbrk_aligned+0x12>
 8003518:	f000 fcb4 	bl	8003e84 <_sbrk_r>
 800351c:	6030      	str	r0, [r6, #0]
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 fcaf 	bl	8003e84 <_sbrk_r>
 8003526:	1c43      	adds	r3, r0, #1
 8003528:	d103      	bne.n	8003532 <sbrk_aligned+0x26>
 800352a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800352e:	4620      	mov	r0, r4
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	1cc4      	adds	r4, r0, #3
 8003534:	f024 0403 	bic.w	r4, r4, #3
 8003538:	42a0      	cmp	r0, r4
 800353a:	d0f8      	beq.n	800352e <sbrk_aligned+0x22>
 800353c:	1a21      	subs	r1, r4, r0
 800353e:	4628      	mov	r0, r5
 8003540:	f000 fca0 	bl	8003e84 <_sbrk_r>
 8003544:	3001      	adds	r0, #1
 8003546:	d1f2      	bne.n	800352e <sbrk_aligned+0x22>
 8003548:	e7ef      	b.n	800352a <sbrk_aligned+0x1e>
 800354a:	bf00      	nop
 800354c:	2000022c 	.word	0x2000022c

08003550 <_malloc_r>:
 8003550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003554:	1ccd      	adds	r5, r1, #3
 8003556:	f025 0503 	bic.w	r5, r5, #3
 800355a:	3508      	adds	r5, #8
 800355c:	2d0c      	cmp	r5, #12
 800355e:	bf38      	it	cc
 8003560:	250c      	movcc	r5, #12
 8003562:	2d00      	cmp	r5, #0
 8003564:	4606      	mov	r6, r0
 8003566:	db01      	blt.n	800356c <_malloc_r+0x1c>
 8003568:	42a9      	cmp	r1, r5
 800356a:	d904      	bls.n	8003576 <_malloc_r+0x26>
 800356c:	230c      	movs	r3, #12
 800356e:	6033      	str	r3, [r6, #0]
 8003570:	2000      	movs	r0, #0
 8003572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800364c <_malloc_r+0xfc>
 800357a:	f000 f869 	bl	8003650 <__malloc_lock>
 800357e:	f8d8 3000 	ldr.w	r3, [r8]
 8003582:	461c      	mov	r4, r3
 8003584:	bb44      	cbnz	r4, 80035d8 <_malloc_r+0x88>
 8003586:	4629      	mov	r1, r5
 8003588:	4630      	mov	r0, r6
 800358a:	f7ff ffbf 	bl	800350c <sbrk_aligned>
 800358e:	1c43      	adds	r3, r0, #1
 8003590:	4604      	mov	r4, r0
 8003592:	d158      	bne.n	8003646 <_malloc_r+0xf6>
 8003594:	f8d8 4000 	ldr.w	r4, [r8]
 8003598:	4627      	mov	r7, r4
 800359a:	2f00      	cmp	r7, #0
 800359c:	d143      	bne.n	8003626 <_malloc_r+0xd6>
 800359e:	2c00      	cmp	r4, #0
 80035a0:	d04b      	beq.n	800363a <_malloc_r+0xea>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	4639      	mov	r1, r7
 80035a6:	4630      	mov	r0, r6
 80035a8:	eb04 0903 	add.w	r9, r4, r3
 80035ac:	f000 fc6a 	bl	8003e84 <_sbrk_r>
 80035b0:	4581      	cmp	r9, r0
 80035b2:	d142      	bne.n	800363a <_malloc_r+0xea>
 80035b4:	6821      	ldr	r1, [r4, #0]
 80035b6:	4630      	mov	r0, r6
 80035b8:	1a6d      	subs	r5, r5, r1
 80035ba:	4629      	mov	r1, r5
 80035bc:	f7ff ffa6 	bl	800350c <sbrk_aligned>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d03a      	beq.n	800363a <_malloc_r+0xea>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	442b      	add	r3, r5
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	f8d8 3000 	ldr.w	r3, [r8]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	bb62      	cbnz	r2, 800362c <_malloc_r+0xdc>
 80035d2:	f8c8 7000 	str.w	r7, [r8]
 80035d6:	e00f      	b.n	80035f8 <_malloc_r+0xa8>
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	1b52      	subs	r2, r2, r5
 80035dc:	d420      	bmi.n	8003620 <_malloc_r+0xd0>
 80035de:	2a0b      	cmp	r2, #11
 80035e0:	d917      	bls.n	8003612 <_malloc_r+0xc2>
 80035e2:	1961      	adds	r1, r4, r5
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	6025      	str	r5, [r4, #0]
 80035e8:	bf18      	it	ne
 80035ea:	6059      	strne	r1, [r3, #4]
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	bf08      	it	eq
 80035f0:	f8c8 1000 	streq.w	r1, [r8]
 80035f4:	5162      	str	r2, [r4, r5]
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	4630      	mov	r0, r6
 80035fa:	f000 f82f 	bl	800365c <__malloc_unlock>
 80035fe:	f104 000b 	add.w	r0, r4, #11
 8003602:	1d23      	adds	r3, r4, #4
 8003604:	f020 0007 	bic.w	r0, r0, #7
 8003608:	1ac2      	subs	r2, r0, r3
 800360a:	bf1c      	itt	ne
 800360c:	1a1b      	subne	r3, r3, r0
 800360e:	50a3      	strne	r3, [r4, r2]
 8003610:	e7af      	b.n	8003572 <_malloc_r+0x22>
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	42a3      	cmp	r3, r4
 8003616:	bf0c      	ite	eq
 8003618:	f8c8 2000 	streq.w	r2, [r8]
 800361c:	605a      	strne	r2, [r3, #4]
 800361e:	e7eb      	b.n	80035f8 <_malloc_r+0xa8>
 8003620:	4623      	mov	r3, r4
 8003622:	6864      	ldr	r4, [r4, #4]
 8003624:	e7ae      	b.n	8003584 <_malloc_r+0x34>
 8003626:	463c      	mov	r4, r7
 8003628:	687f      	ldr	r7, [r7, #4]
 800362a:	e7b6      	b.n	800359a <_malloc_r+0x4a>
 800362c:	461a      	mov	r2, r3
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	42a3      	cmp	r3, r4
 8003632:	d1fb      	bne.n	800362c <_malloc_r+0xdc>
 8003634:	2300      	movs	r3, #0
 8003636:	6053      	str	r3, [r2, #4]
 8003638:	e7de      	b.n	80035f8 <_malloc_r+0xa8>
 800363a:	230c      	movs	r3, #12
 800363c:	4630      	mov	r0, r6
 800363e:	6033      	str	r3, [r6, #0]
 8003640:	f000 f80c 	bl	800365c <__malloc_unlock>
 8003644:	e794      	b.n	8003570 <_malloc_r+0x20>
 8003646:	6005      	str	r5, [r0, #0]
 8003648:	e7d6      	b.n	80035f8 <_malloc_r+0xa8>
 800364a:	bf00      	nop
 800364c:	20000230 	.word	0x20000230

08003650 <__malloc_lock>:
 8003650:	4801      	ldr	r0, [pc, #4]	@ (8003658 <__malloc_lock+0x8>)
 8003652:	f7ff bf10 	b.w	8003476 <__retarget_lock_acquire_recursive>
 8003656:	bf00      	nop
 8003658:	20000228 	.word	0x20000228

0800365c <__malloc_unlock>:
 800365c:	4801      	ldr	r0, [pc, #4]	@ (8003664 <__malloc_unlock+0x8>)
 800365e:	f7ff bf0b 	b.w	8003478 <__retarget_lock_release_recursive>
 8003662:	bf00      	nop
 8003664:	20000228 	.word	0x20000228

08003668 <__sfputc_r>:
 8003668:	6893      	ldr	r3, [r2, #8]
 800366a:	b410      	push	{r4}
 800366c:	3b01      	subs	r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	da07      	bge.n	8003684 <__sfputc_r+0x1c>
 8003674:	6994      	ldr	r4, [r2, #24]
 8003676:	42a3      	cmp	r3, r4
 8003678:	db01      	blt.n	800367e <__sfputc_r+0x16>
 800367a:	290a      	cmp	r1, #10
 800367c:	d102      	bne.n	8003684 <__sfputc_r+0x1c>
 800367e:	bc10      	pop	{r4}
 8003680:	f000 bb6c 	b.w	8003d5c <__swbuf_r>
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	1c58      	adds	r0, r3, #1
 8003688:	6010      	str	r0, [r2, #0]
 800368a:	7019      	strb	r1, [r3, #0]
 800368c:	4608      	mov	r0, r1
 800368e:	bc10      	pop	{r4}
 8003690:	4770      	bx	lr

08003692 <__sfputs_r>:
 8003692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003694:	4606      	mov	r6, r0
 8003696:	460f      	mov	r7, r1
 8003698:	4614      	mov	r4, r2
 800369a:	18d5      	adds	r5, r2, r3
 800369c:	42ac      	cmp	r4, r5
 800369e:	d101      	bne.n	80036a4 <__sfputs_r+0x12>
 80036a0:	2000      	movs	r0, #0
 80036a2:	e007      	b.n	80036b4 <__sfputs_r+0x22>
 80036a4:	463a      	mov	r2, r7
 80036a6:	4630      	mov	r0, r6
 80036a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ac:	f7ff ffdc 	bl	8003668 <__sfputc_r>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d1f3      	bne.n	800369c <__sfputs_r+0xa>
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036b8 <_vfiprintf_r>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	460d      	mov	r5, r1
 80036be:	4614      	mov	r4, r2
 80036c0:	4698      	mov	r8, r3
 80036c2:	4606      	mov	r6, r0
 80036c4:	b09d      	sub	sp, #116	@ 0x74
 80036c6:	b118      	cbz	r0, 80036d0 <_vfiprintf_r+0x18>
 80036c8:	6a03      	ldr	r3, [r0, #32]
 80036ca:	b90b      	cbnz	r3, 80036d0 <_vfiprintf_r+0x18>
 80036cc:	f7ff fdce 	bl	800326c <__sinit>
 80036d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036d2:	07d9      	lsls	r1, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_vfiprintf_r+0x2a>
 80036d6:	89ab      	ldrh	r3, [r5, #12]
 80036d8:	059a      	lsls	r2, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_vfiprintf_r+0x2a>
 80036dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036de:	f7ff feca 	bl	8003476 <__retarget_lock_acquire_recursive>
 80036e2:	89ab      	ldrh	r3, [r5, #12]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	d501      	bpl.n	80036ec <_vfiprintf_r+0x34>
 80036e8:	692b      	ldr	r3, [r5, #16]
 80036ea:	b99b      	cbnz	r3, 8003714 <_vfiprintf_r+0x5c>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4630      	mov	r0, r6
 80036f0:	f000 fb72 	bl	8003dd8 <__swsetup_r>
 80036f4:	b170      	cbz	r0, 8003714 <_vfiprintf_r+0x5c>
 80036f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036f8:	07dc      	lsls	r4, r3, #31
 80036fa:	d504      	bpl.n	8003706 <_vfiprintf_r+0x4e>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003700:	b01d      	add	sp, #116	@ 0x74
 8003702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003706:	89ab      	ldrh	r3, [r5, #12]
 8003708:	0598      	lsls	r0, r3, #22
 800370a:	d4f7      	bmi.n	80036fc <_vfiprintf_r+0x44>
 800370c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800370e:	f7ff feb3 	bl	8003478 <__retarget_lock_release_recursive>
 8003712:	e7f3      	b.n	80036fc <_vfiprintf_r+0x44>
 8003714:	2300      	movs	r3, #0
 8003716:	9309      	str	r3, [sp, #36]	@ 0x24
 8003718:	2320      	movs	r3, #32
 800371a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800371e:	2330      	movs	r3, #48	@ 0x30
 8003720:	f04f 0901 	mov.w	r9, #1
 8003724:	f8cd 800c 	str.w	r8, [sp, #12]
 8003728:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80038d4 <_vfiprintf_r+0x21c>
 800372c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003730:	4623      	mov	r3, r4
 8003732:	469a      	mov	sl, r3
 8003734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003738:	b10a      	cbz	r2, 800373e <_vfiprintf_r+0x86>
 800373a:	2a25      	cmp	r2, #37	@ 0x25
 800373c:	d1f9      	bne.n	8003732 <_vfiprintf_r+0x7a>
 800373e:	ebba 0b04 	subs.w	fp, sl, r4
 8003742:	d00b      	beq.n	800375c <_vfiprintf_r+0xa4>
 8003744:	465b      	mov	r3, fp
 8003746:	4622      	mov	r2, r4
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	f7ff ffa1 	bl	8003692 <__sfputs_r>
 8003750:	3001      	adds	r0, #1
 8003752:	f000 80a7 	beq.w	80038a4 <_vfiprintf_r+0x1ec>
 8003756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003758:	445a      	add	r2, fp
 800375a:	9209      	str	r2, [sp, #36]	@ 0x24
 800375c:	f89a 3000 	ldrb.w	r3, [sl]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 809f 	beq.w	80038a4 <_vfiprintf_r+0x1ec>
 8003766:	2300      	movs	r3, #0
 8003768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800376c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003770:	f10a 0a01 	add.w	sl, sl, #1
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	9307      	str	r3, [sp, #28]
 8003778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800377c:	931a      	str	r3, [sp, #104]	@ 0x68
 800377e:	4654      	mov	r4, sl
 8003780:	2205      	movs	r2, #5
 8003782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003786:	4853      	ldr	r0, [pc, #332]	@ (80038d4 <_vfiprintf_r+0x21c>)
 8003788:	f000 fb8c 	bl	8003ea4 <memchr>
 800378c:	9a04      	ldr	r2, [sp, #16]
 800378e:	b9d8      	cbnz	r0, 80037c8 <_vfiprintf_r+0x110>
 8003790:	06d1      	lsls	r1, r2, #27
 8003792:	bf44      	itt	mi
 8003794:	2320      	movmi	r3, #32
 8003796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800379a:	0713      	lsls	r3, r2, #28
 800379c:	bf44      	itt	mi
 800379e:	232b      	movmi	r3, #43	@ 0x2b
 80037a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037a4:	f89a 3000 	ldrb.w	r3, [sl]
 80037a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037aa:	d015      	beq.n	80037d8 <_vfiprintf_r+0x120>
 80037ac:	4654      	mov	r4, sl
 80037ae:	2000      	movs	r0, #0
 80037b0:	f04f 0c0a 	mov.w	ip, #10
 80037b4:	9a07      	ldr	r2, [sp, #28]
 80037b6:	4621      	mov	r1, r4
 80037b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037bc:	3b30      	subs	r3, #48	@ 0x30
 80037be:	2b09      	cmp	r3, #9
 80037c0:	d94b      	bls.n	800385a <_vfiprintf_r+0x1a2>
 80037c2:	b1b0      	cbz	r0, 80037f2 <_vfiprintf_r+0x13a>
 80037c4:	9207      	str	r2, [sp, #28]
 80037c6:	e014      	b.n	80037f2 <_vfiprintf_r+0x13a>
 80037c8:	eba0 0308 	sub.w	r3, r0, r8
 80037cc:	fa09 f303 	lsl.w	r3, r9, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	46a2      	mov	sl, r4
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	e7d2      	b.n	800377e <_vfiprintf_r+0xc6>
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	1d19      	adds	r1, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	9103      	str	r1, [sp, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfbb      	ittet	lt
 80037e4:	425b      	neglt	r3, r3
 80037e6:	f042 0202 	orrlt.w	r2, r2, #2
 80037ea:	9307      	strge	r3, [sp, #28]
 80037ec:	9307      	strlt	r3, [sp, #28]
 80037ee:	bfb8      	it	lt
 80037f0:	9204      	strlt	r2, [sp, #16]
 80037f2:	7823      	ldrb	r3, [r4, #0]
 80037f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80037f6:	d10a      	bne.n	800380e <_vfiprintf_r+0x156>
 80037f8:	7863      	ldrb	r3, [r4, #1]
 80037fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80037fc:	d132      	bne.n	8003864 <_vfiprintf_r+0x1ac>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	3402      	adds	r4, #2
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	9203      	str	r2, [sp, #12]
 8003808:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800380c:	9305      	str	r3, [sp, #20]
 800380e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80038d8 <_vfiprintf_r+0x220>
 8003812:	2203      	movs	r2, #3
 8003814:	4650      	mov	r0, sl
 8003816:	7821      	ldrb	r1, [r4, #0]
 8003818:	f000 fb44 	bl	8003ea4 <memchr>
 800381c:	b138      	cbz	r0, 800382e <_vfiprintf_r+0x176>
 800381e:	2240      	movs	r2, #64	@ 0x40
 8003820:	9b04      	ldr	r3, [sp, #16]
 8003822:	eba0 000a 	sub.w	r0, r0, sl
 8003826:	4082      	lsls	r2, r0
 8003828:	4313      	orrs	r3, r2
 800382a:	3401      	adds	r4, #1
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003832:	2206      	movs	r2, #6
 8003834:	4829      	ldr	r0, [pc, #164]	@ (80038dc <_vfiprintf_r+0x224>)
 8003836:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800383a:	f000 fb33 	bl	8003ea4 <memchr>
 800383e:	2800      	cmp	r0, #0
 8003840:	d03f      	beq.n	80038c2 <_vfiprintf_r+0x20a>
 8003842:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <_vfiprintf_r+0x228>)
 8003844:	bb1b      	cbnz	r3, 800388e <_vfiprintf_r+0x1d6>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	3307      	adds	r3, #7
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	3308      	adds	r3, #8
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003854:	443b      	add	r3, r7
 8003856:	9309      	str	r3, [sp, #36]	@ 0x24
 8003858:	e76a      	b.n	8003730 <_vfiprintf_r+0x78>
 800385a:	460c      	mov	r4, r1
 800385c:	2001      	movs	r0, #1
 800385e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003862:	e7a8      	b.n	80037b6 <_vfiprintf_r+0xfe>
 8003864:	2300      	movs	r3, #0
 8003866:	f04f 0c0a 	mov.w	ip, #10
 800386a:	4619      	mov	r1, r3
 800386c:	3401      	adds	r4, #1
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	4620      	mov	r0, r4
 8003872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003876:	3a30      	subs	r2, #48	@ 0x30
 8003878:	2a09      	cmp	r2, #9
 800387a:	d903      	bls.n	8003884 <_vfiprintf_r+0x1cc>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0c6      	beq.n	800380e <_vfiprintf_r+0x156>
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	e7c4      	b.n	800380e <_vfiprintf_r+0x156>
 8003884:	4604      	mov	r4, r0
 8003886:	2301      	movs	r3, #1
 8003888:	fb0c 2101 	mla	r1, ip, r1, r2
 800388c:	e7f0      	b.n	8003870 <_vfiprintf_r+0x1b8>
 800388e:	ab03      	add	r3, sp, #12
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	462a      	mov	r2, r5
 8003894:	4630      	mov	r0, r6
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <_vfiprintf_r+0x22c>)
 8003898:	a904      	add	r1, sp, #16
 800389a:	f3af 8000 	nop.w
 800389e:	4607      	mov	r7, r0
 80038a0:	1c78      	adds	r0, r7, #1
 80038a2:	d1d6      	bne.n	8003852 <_vfiprintf_r+0x19a>
 80038a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038a6:	07d9      	lsls	r1, r3, #31
 80038a8:	d405      	bmi.n	80038b6 <_vfiprintf_r+0x1fe>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	059a      	lsls	r2, r3, #22
 80038ae:	d402      	bmi.n	80038b6 <_vfiprintf_r+0x1fe>
 80038b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038b2:	f7ff fde1 	bl	8003478 <__retarget_lock_release_recursive>
 80038b6:	89ab      	ldrh	r3, [r5, #12]
 80038b8:	065b      	lsls	r3, r3, #25
 80038ba:	f53f af1f 	bmi.w	80036fc <_vfiprintf_r+0x44>
 80038be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038c0:	e71e      	b.n	8003700 <_vfiprintf_r+0x48>
 80038c2:	ab03      	add	r3, sp, #12
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	462a      	mov	r2, r5
 80038c8:	4630      	mov	r0, r6
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <_vfiprintf_r+0x22c>)
 80038cc:	a904      	add	r1, sp, #16
 80038ce:	f000 f87d 	bl	80039cc <_printf_i>
 80038d2:	e7e4      	b.n	800389e <_vfiprintf_r+0x1e6>
 80038d4:	080040ba 	.word	0x080040ba
 80038d8:	080040c0 	.word	0x080040c0
 80038dc:	080040c4 	.word	0x080040c4
 80038e0:	00000000 	.word	0x00000000
 80038e4:	08003693 	.word	0x08003693

080038e8 <_printf_common>:
 80038e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	4616      	mov	r6, r2
 80038ee:	4698      	mov	r8, r3
 80038f0:	688a      	ldr	r2, [r1, #8]
 80038f2:	690b      	ldr	r3, [r1, #16]
 80038f4:	4607      	mov	r7, r0
 80038f6:	4293      	cmp	r3, r2
 80038f8:	bfb8      	it	lt
 80038fa:	4613      	movlt	r3, r2
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003902:	460c      	mov	r4, r1
 8003904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003908:	b10a      	cbz	r2, 800390e <_printf_common+0x26>
 800390a:	3301      	adds	r3, #1
 800390c:	6033      	str	r3, [r6, #0]
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	0699      	lsls	r1, r3, #26
 8003912:	bf42      	ittt	mi
 8003914:	6833      	ldrmi	r3, [r6, #0]
 8003916:	3302      	addmi	r3, #2
 8003918:	6033      	strmi	r3, [r6, #0]
 800391a:	6825      	ldr	r5, [r4, #0]
 800391c:	f015 0506 	ands.w	r5, r5, #6
 8003920:	d106      	bne.n	8003930 <_printf_common+0x48>
 8003922:	f104 0a19 	add.w	sl, r4, #25
 8003926:	68e3      	ldr	r3, [r4, #12]
 8003928:	6832      	ldr	r2, [r6, #0]
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	42ab      	cmp	r3, r5
 800392e:	dc2b      	bgt.n	8003988 <_printf_common+0xa0>
 8003930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003934:	6822      	ldr	r2, [r4, #0]
 8003936:	3b00      	subs	r3, #0
 8003938:	bf18      	it	ne
 800393a:	2301      	movne	r3, #1
 800393c:	0692      	lsls	r2, r2, #26
 800393e:	d430      	bmi.n	80039a2 <_printf_common+0xba>
 8003940:	4641      	mov	r1, r8
 8003942:	4638      	mov	r0, r7
 8003944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003948:	47c8      	blx	r9
 800394a:	3001      	adds	r0, #1
 800394c:	d023      	beq.n	8003996 <_printf_common+0xae>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	6922      	ldr	r2, [r4, #16]
 8003952:	f003 0306 	and.w	r3, r3, #6
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf14      	ite	ne
 800395a:	2500      	movne	r5, #0
 800395c:	6833      	ldreq	r3, [r6, #0]
 800395e:	f04f 0600 	mov.w	r6, #0
 8003962:	bf08      	it	eq
 8003964:	68e5      	ldreq	r5, [r4, #12]
 8003966:	f104 041a 	add.w	r4, r4, #26
 800396a:	bf08      	it	eq
 800396c:	1aed      	subeq	r5, r5, r3
 800396e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003972:	bf08      	it	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	4293      	cmp	r3, r2
 800397a:	bfc4      	itt	gt
 800397c:	1a9b      	subgt	r3, r3, r2
 800397e:	18ed      	addgt	r5, r5, r3
 8003980:	42b5      	cmp	r5, r6
 8003982:	d11a      	bne.n	80039ba <_printf_common+0xd2>
 8003984:	2000      	movs	r0, #0
 8003986:	e008      	b.n	800399a <_printf_common+0xb2>
 8003988:	2301      	movs	r3, #1
 800398a:	4652      	mov	r2, sl
 800398c:	4641      	mov	r1, r8
 800398e:	4638      	mov	r0, r7
 8003990:	47c8      	blx	r9
 8003992:	3001      	adds	r0, #1
 8003994:	d103      	bne.n	800399e <_printf_common+0xb6>
 8003996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399e:	3501      	adds	r5, #1
 80039a0:	e7c1      	b.n	8003926 <_printf_common+0x3e>
 80039a2:	2030      	movs	r0, #48	@ 0x30
 80039a4:	18e1      	adds	r1, r4, r3
 80039a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039b0:	4422      	add	r2, r4
 80039b2:	3302      	adds	r3, #2
 80039b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039b8:	e7c2      	b.n	8003940 <_printf_common+0x58>
 80039ba:	2301      	movs	r3, #1
 80039bc:	4622      	mov	r2, r4
 80039be:	4641      	mov	r1, r8
 80039c0:	4638      	mov	r0, r7
 80039c2:	47c8      	blx	r9
 80039c4:	3001      	adds	r0, #1
 80039c6:	d0e6      	beq.n	8003996 <_printf_common+0xae>
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7d9      	b.n	8003980 <_printf_common+0x98>

080039cc <_printf_i>:
 80039cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d0:	7e0f      	ldrb	r7, [r1, #24]
 80039d2:	4691      	mov	r9, r2
 80039d4:	2f78      	cmp	r7, #120	@ 0x78
 80039d6:	4680      	mov	r8, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	469a      	mov	sl, r3
 80039dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039e2:	d807      	bhi.n	80039f4 <_printf_i+0x28>
 80039e4:	2f62      	cmp	r7, #98	@ 0x62
 80039e6:	d80a      	bhi.n	80039fe <_printf_i+0x32>
 80039e8:	2f00      	cmp	r7, #0
 80039ea:	f000 80d3 	beq.w	8003b94 <_printf_i+0x1c8>
 80039ee:	2f58      	cmp	r7, #88	@ 0x58
 80039f0:	f000 80ba 	beq.w	8003b68 <_printf_i+0x19c>
 80039f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039fc:	e03a      	b.n	8003a74 <_printf_i+0xa8>
 80039fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a02:	2b15      	cmp	r3, #21
 8003a04:	d8f6      	bhi.n	80039f4 <_printf_i+0x28>
 8003a06:	a101      	add	r1, pc, #4	@ (adr r1, 8003a0c <_printf_i+0x40>)
 8003a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a0c:	08003a65 	.word	0x08003a65
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	080039f5 	.word	0x080039f5
 8003a18:	080039f5 	.word	0x080039f5
 8003a1c:	080039f5 	.word	0x080039f5
 8003a20:	080039f5 	.word	0x080039f5
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	080039f5 	.word	0x080039f5
 8003a2c:	080039f5 	.word	0x080039f5
 8003a30:	080039f5 	.word	0x080039f5
 8003a34:	080039f5 	.word	0x080039f5
 8003a38:	08003b7b 	.word	0x08003b7b
 8003a3c:	08003aa3 	.word	0x08003aa3
 8003a40:	08003b35 	.word	0x08003b35
 8003a44:	080039f5 	.word	0x080039f5
 8003a48:	080039f5 	.word	0x080039f5
 8003a4c:	08003b9d 	.word	0x08003b9d
 8003a50:	080039f5 	.word	0x080039f5
 8003a54:	08003aa3 	.word	0x08003aa3
 8003a58:	080039f5 	.word	0x080039f5
 8003a5c:	080039f5 	.word	0x080039f5
 8003a60:	08003b3d 	.word	0x08003b3d
 8003a64:	6833      	ldr	r3, [r6, #0]
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6032      	str	r2, [r6, #0]
 8003a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a74:	2301      	movs	r3, #1
 8003a76:	e09e      	b.n	8003bb6 <_printf_i+0x1ea>
 8003a78:	6833      	ldr	r3, [r6, #0]
 8003a7a:	6820      	ldr	r0, [r4, #0]
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	6031      	str	r1, [r6, #0]
 8003a80:	0606      	lsls	r6, r0, #24
 8003a82:	d501      	bpl.n	8003a88 <_printf_i+0xbc>
 8003a84:	681d      	ldr	r5, [r3, #0]
 8003a86:	e003      	b.n	8003a90 <_printf_i+0xc4>
 8003a88:	0645      	lsls	r5, r0, #25
 8003a8a:	d5fb      	bpl.n	8003a84 <_printf_i+0xb8>
 8003a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	da03      	bge.n	8003a9c <_printf_i+0xd0>
 8003a94:	232d      	movs	r3, #45	@ 0x2d
 8003a96:	426d      	negs	r5, r5
 8003a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	4859      	ldr	r0, [pc, #356]	@ (8003c04 <_printf_i+0x238>)
 8003aa0:	e011      	b.n	8003ac6 <_printf_i+0xfa>
 8003aa2:	6821      	ldr	r1, [r4, #0]
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	0608      	lsls	r0, r1, #24
 8003aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003aac:	d402      	bmi.n	8003ab4 <_printf_i+0xe8>
 8003aae:	0649      	lsls	r1, r1, #25
 8003ab0:	bf48      	it	mi
 8003ab2:	b2ad      	uxthmi	r5, r5
 8003ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	bf14      	ite	ne
 8003aba:	230a      	movne	r3, #10
 8003abc:	2308      	moveq	r3, #8
 8003abe:	4851      	ldr	r0, [pc, #324]	@ (8003c04 <_printf_i+0x238>)
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ac6:	6866      	ldr	r6, [r4, #4]
 8003ac8:	2e00      	cmp	r6, #0
 8003aca:	bfa8      	it	ge
 8003acc:	6821      	ldrge	r1, [r4, #0]
 8003ace:	60a6      	str	r6, [r4, #8]
 8003ad0:	bfa4      	itt	ge
 8003ad2:	f021 0104 	bicge.w	r1, r1, #4
 8003ad6:	6021      	strge	r1, [r4, #0]
 8003ad8:	b90d      	cbnz	r5, 8003ade <_printf_i+0x112>
 8003ada:	2e00      	cmp	r6, #0
 8003adc:	d04b      	beq.n	8003b76 <_printf_i+0x1aa>
 8003ade:	4616      	mov	r6, r2
 8003ae0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ae4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ae8:	5dc7      	ldrb	r7, [r0, r7]
 8003aea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aee:	462f      	mov	r7, r5
 8003af0:	42bb      	cmp	r3, r7
 8003af2:	460d      	mov	r5, r1
 8003af4:	d9f4      	bls.n	8003ae0 <_printf_i+0x114>
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d10b      	bne.n	8003b12 <_printf_i+0x146>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	07df      	lsls	r7, r3, #31
 8003afe:	d508      	bpl.n	8003b12 <_printf_i+0x146>
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	6861      	ldr	r1, [r4, #4]
 8003b04:	4299      	cmp	r1, r3
 8003b06:	bfde      	ittt	le
 8003b08:	2330      	movle	r3, #48	@ 0x30
 8003b0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003b12:	1b92      	subs	r2, r2, r6
 8003b14:	6122      	str	r2, [r4, #16]
 8003b16:	464b      	mov	r3, r9
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	f8cd a000 	str.w	sl, [sp]
 8003b20:	aa03      	add	r2, sp, #12
 8003b22:	f7ff fee1 	bl	80038e8 <_printf_common>
 8003b26:	3001      	adds	r0, #1
 8003b28:	d14a      	bne.n	8003bc0 <_printf_i+0x1f4>
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2e:	b004      	add	sp, #16
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	f043 0320 	orr.w	r3, r3, #32
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	2778      	movs	r7, #120	@ 0x78
 8003b3e:	4832      	ldr	r0, [pc, #200]	@ (8003c08 <_printf_i+0x23c>)
 8003b40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	6831      	ldr	r1, [r6, #0]
 8003b48:	061f      	lsls	r7, r3, #24
 8003b4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b4e:	d402      	bmi.n	8003b56 <_printf_i+0x18a>
 8003b50:	065f      	lsls	r7, r3, #25
 8003b52:	bf48      	it	mi
 8003b54:	b2ad      	uxthmi	r5, r5
 8003b56:	6031      	str	r1, [r6, #0]
 8003b58:	07d9      	lsls	r1, r3, #31
 8003b5a:	bf44      	itt	mi
 8003b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b60:	6023      	strmi	r3, [r4, #0]
 8003b62:	b11d      	cbz	r5, 8003b6c <_printf_i+0x1a0>
 8003b64:	2310      	movs	r3, #16
 8003b66:	e7ab      	b.n	8003ac0 <_printf_i+0xf4>
 8003b68:	4826      	ldr	r0, [pc, #152]	@ (8003c04 <_printf_i+0x238>)
 8003b6a:	e7e9      	b.n	8003b40 <_printf_i+0x174>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	e7f6      	b.n	8003b64 <_printf_i+0x198>
 8003b76:	4616      	mov	r6, r2
 8003b78:	e7bd      	b.n	8003af6 <_printf_i+0x12a>
 8003b7a:	6833      	ldr	r3, [r6, #0]
 8003b7c:	6825      	ldr	r5, [r4, #0]
 8003b7e:	1d18      	adds	r0, r3, #4
 8003b80:	6961      	ldr	r1, [r4, #20]
 8003b82:	6030      	str	r0, [r6, #0]
 8003b84:	062e      	lsls	r6, r5, #24
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	d501      	bpl.n	8003b8e <_printf_i+0x1c2>
 8003b8a:	6019      	str	r1, [r3, #0]
 8003b8c:	e002      	b.n	8003b94 <_printf_i+0x1c8>
 8003b8e:	0668      	lsls	r0, r5, #25
 8003b90:	d5fb      	bpl.n	8003b8a <_printf_i+0x1be>
 8003b92:	8019      	strh	r1, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	4616      	mov	r6, r2
 8003b98:	6123      	str	r3, [r4, #16]
 8003b9a:	e7bc      	b.n	8003b16 <_printf_i+0x14a>
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	6032      	str	r2, [r6, #0]
 8003ba4:	681e      	ldr	r6, [r3, #0]
 8003ba6:	6862      	ldr	r2, [r4, #4]
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f000 f97b 	bl	8003ea4 <memchr>
 8003bae:	b108      	cbz	r0, 8003bb4 <_printf_i+0x1e8>
 8003bb0:	1b80      	subs	r0, r0, r6
 8003bb2:	6060      	str	r0, [r4, #4]
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bbe:	e7aa      	b.n	8003b16 <_printf_i+0x14a>
 8003bc0:	4632      	mov	r2, r6
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	47d0      	blx	sl
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0ad      	beq.n	8003b2a <_printf_i+0x15e>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	079b      	lsls	r3, r3, #30
 8003bd2:	d413      	bmi.n	8003bfc <_printf_i+0x230>
 8003bd4:	68e0      	ldr	r0, [r4, #12]
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	4298      	cmp	r0, r3
 8003bda:	bfb8      	it	lt
 8003bdc:	4618      	movlt	r0, r3
 8003bde:	e7a6      	b.n	8003b2e <_printf_i+0x162>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4632      	mov	r2, r6
 8003be4:	4649      	mov	r1, r9
 8003be6:	4640      	mov	r0, r8
 8003be8:	47d0      	blx	sl
 8003bea:	3001      	adds	r0, #1
 8003bec:	d09d      	beq.n	8003b2a <_printf_i+0x15e>
 8003bee:	3501      	adds	r5, #1
 8003bf0:	68e3      	ldr	r3, [r4, #12]
 8003bf2:	9903      	ldr	r1, [sp, #12]
 8003bf4:	1a5b      	subs	r3, r3, r1
 8003bf6:	42ab      	cmp	r3, r5
 8003bf8:	dcf2      	bgt.n	8003be0 <_printf_i+0x214>
 8003bfa:	e7eb      	b.n	8003bd4 <_printf_i+0x208>
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	f104 0619 	add.w	r6, r4, #25
 8003c02:	e7f5      	b.n	8003bf0 <_printf_i+0x224>
 8003c04:	080040cb 	.word	0x080040cb
 8003c08:	080040dc 	.word	0x080040dc

08003c0c <__sflush_r>:
 8003c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	0716      	lsls	r6, r2, #28
 8003c14:	4605      	mov	r5, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	d454      	bmi.n	8003cc4 <__sflush_r+0xb8>
 8003c1a:	684b      	ldr	r3, [r1, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dc02      	bgt.n	8003c26 <__sflush_r+0x1a>
 8003c20:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dd48      	ble.n	8003cb8 <__sflush_r+0xac>
 8003c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c28:	2e00      	cmp	r6, #0
 8003c2a:	d045      	beq.n	8003cb8 <__sflush_r+0xac>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c32:	682f      	ldr	r7, [r5, #0]
 8003c34:	6a21      	ldr	r1, [r4, #32]
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	d030      	beq.n	8003c9c <__sflush_r+0x90>
 8003c3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	0759      	lsls	r1, r3, #29
 8003c40:	d505      	bpl.n	8003c4e <__sflush_r+0x42>
 8003c42:	6863      	ldr	r3, [r4, #4]
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c48:	b10b      	cbz	r3, 8003c4e <__sflush_r+0x42>
 8003c4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c4c:	1ad2      	subs	r2, r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	4628      	mov	r0, r5
 8003c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c54:	6a21      	ldr	r1, [r4, #32]
 8003c56:	47b0      	blx	r6
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	d106      	bne.n	8003c6c <__sflush_r+0x60>
 8003c5e:	6829      	ldr	r1, [r5, #0]
 8003c60:	291d      	cmp	r1, #29
 8003c62:	d82b      	bhi.n	8003cbc <__sflush_r+0xb0>
 8003c64:	4a28      	ldr	r2, [pc, #160]	@ (8003d08 <__sflush_r+0xfc>)
 8003c66:	410a      	asrs	r2, r1
 8003c68:	07d6      	lsls	r6, r2, #31
 8003c6a:	d427      	bmi.n	8003cbc <__sflush_r+0xb0>
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	6062      	str	r2, [r4, #4]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	04d9      	lsls	r1, r3, #19
 8003c74:	6022      	str	r2, [r4, #0]
 8003c76:	d504      	bpl.n	8003c82 <__sflush_r+0x76>
 8003c78:	1c42      	adds	r2, r0, #1
 8003c7a:	d101      	bne.n	8003c80 <__sflush_r+0x74>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b903      	cbnz	r3, 8003c82 <__sflush_r+0x76>
 8003c80:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c84:	602f      	str	r7, [r5, #0]
 8003c86:	b1b9      	cbz	r1, 8003cb8 <__sflush_r+0xac>
 8003c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c8c:	4299      	cmp	r1, r3
 8003c8e:	d002      	beq.n	8003c96 <__sflush_r+0x8a>
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff fbf3 	bl	800347c <_free_r>
 8003c96:	2300      	movs	r3, #0
 8003c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c9a:	e00d      	b.n	8003cb8 <__sflush_r+0xac>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b0      	blx	r6
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	1c50      	adds	r0, r2, #1
 8003ca6:	d1c9      	bne.n	8003c3c <__sflush_r+0x30>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0c6      	beq.n	8003c3c <__sflush_r+0x30>
 8003cae:	2b1d      	cmp	r3, #29
 8003cb0:	d001      	beq.n	8003cb6 <__sflush_r+0xaa>
 8003cb2:	2b16      	cmp	r3, #22
 8003cb4:	d11d      	bne.n	8003cf2 <__sflush_r+0xe6>
 8003cb6:	602f      	str	r7, [r5, #0]
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e021      	b.n	8003d00 <__sflush_r+0xf4>
 8003cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	e01a      	b.n	8003cfa <__sflush_r+0xee>
 8003cc4:	690f      	ldr	r7, [r1, #16]
 8003cc6:	2f00      	cmp	r7, #0
 8003cc8:	d0f6      	beq.n	8003cb8 <__sflush_r+0xac>
 8003cca:	0793      	lsls	r3, r2, #30
 8003ccc:	bf18      	it	ne
 8003cce:	2300      	movne	r3, #0
 8003cd0:	680e      	ldr	r6, [r1, #0]
 8003cd2:	bf08      	it	eq
 8003cd4:	694b      	ldreq	r3, [r1, #20]
 8003cd6:	1bf6      	subs	r6, r6, r7
 8003cd8:	600f      	str	r7, [r1, #0]
 8003cda:	608b      	str	r3, [r1, #8]
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	ddeb      	ble.n	8003cb8 <__sflush_r+0xac>
 8003ce0:	4633      	mov	r3, r6
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	6a21      	ldr	r1, [r4, #32]
 8003ce8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003cec:	47e0      	blx	ip
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	dc07      	bgt.n	8003d02 <__sflush_r+0xf6>
 8003cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	4407      	add	r7, r0
 8003d04:	1a36      	subs	r6, r6, r0
 8003d06:	e7e9      	b.n	8003cdc <__sflush_r+0xd0>
 8003d08:	dfbffffe 	.word	0xdfbffffe

08003d0c <_fflush_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	690b      	ldr	r3, [r1, #16]
 8003d10:	4605      	mov	r5, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	b913      	cbnz	r3, 8003d1c <_fflush_r+0x10>
 8003d16:	2500      	movs	r5, #0
 8003d18:	4628      	mov	r0, r5
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	b118      	cbz	r0, 8003d26 <_fflush_r+0x1a>
 8003d1e:	6a03      	ldr	r3, [r0, #32]
 8003d20:	b90b      	cbnz	r3, 8003d26 <_fflush_r+0x1a>
 8003d22:	f7ff faa3 	bl	800326c <__sinit>
 8003d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f3      	beq.n	8003d16 <_fflush_r+0xa>
 8003d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d30:	07d0      	lsls	r0, r2, #31
 8003d32:	d404      	bmi.n	8003d3e <_fflush_r+0x32>
 8003d34:	0599      	lsls	r1, r3, #22
 8003d36:	d402      	bmi.n	8003d3e <_fflush_r+0x32>
 8003d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d3a:	f7ff fb9c 	bl	8003476 <__retarget_lock_acquire_recursive>
 8003d3e:	4628      	mov	r0, r5
 8003d40:	4621      	mov	r1, r4
 8003d42:	f7ff ff63 	bl	8003c0c <__sflush_r>
 8003d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d48:	4605      	mov	r5, r0
 8003d4a:	07da      	lsls	r2, r3, #31
 8003d4c:	d4e4      	bmi.n	8003d18 <_fflush_r+0xc>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	059b      	lsls	r3, r3, #22
 8003d52:	d4e1      	bmi.n	8003d18 <_fflush_r+0xc>
 8003d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d56:	f7ff fb8f 	bl	8003478 <__retarget_lock_release_recursive>
 8003d5a:	e7dd      	b.n	8003d18 <_fflush_r+0xc>

08003d5c <__swbuf_r>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	460e      	mov	r6, r1
 8003d60:	4614      	mov	r4, r2
 8003d62:	4605      	mov	r5, r0
 8003d64:	b118      	cbz	r0, 8003d6e <__swbuf_r+0x12>
 8003d66:	6a03      	ldr	r3, [r0, #32]
 8003d68:	b90b      	cbnz	r3, 8003d6e <__swbuf_r+0x12>
 8003d6a:	f7ff fa7f 	bl	800326c <__sinit>
 8003d6e:	69a3      	ldr	r3, [r4, #24]
 8003d70:	60a3      	str	r3, [r4, #8]
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	071a      	lsls	r2, r3, #28
 8003d76:	d501      	bpl.n	8003d7c <__swbuf_r+0x20>
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	b943      	cbnz	r3, 8003d8e <__swbuf_r+0x32>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 f82a 	bl	8003dd8 <__swsetup_r>
 8003d84:	b118      	cbz	r0, 8003d8e <__swbuf_r+0x32>
 8003d86:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	b2f6      	uxtb	r6, r6
 8003d94:	1a98      	subs	r0, r3, r2
 8003d96:	6963      	ldr	r3, [r4, #20]
 8003d98:	4637      	mov	r7, r6
 8003d9a:	4283      	cmp	r3, r0
 8003d9c:	dc05      	bgt.n	8003daa <__swbuf_r+0x4e>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4628      	mov	r0, r5
 8003da2:	f7ff ffb3 	bl	8003d0c <_fflush_r>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1ed      	bne.n	8003d86 <__swbuf_r+0x2a>
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	6022      	str	r2, [r4, #0]
 8003db6:	701e      	strb	r6, [r3, #0]
 8003db8:	6962      	ldr	r2, [r4, #20]
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d004      	beq.n	8003dca <__swbuf_r+0x6e>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	07db      	lsls	r3, r3, #31
 8003dc4:	d5e1      	bpl.n	8003d8a <__swbuf_r+0x2e>
 8003dc6:	2e0a      	cmp	r6, #10
 8003dc8:	d1df      	bne.n	8003d8a <__swbuf_r+0x2e>
 8003dca:	4621      	mov	r1, r4
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f7ff ff9d 	bl	8003d0c <_fflush_r>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d0d9      	beq.n	8003d8a <__swbuf_r+0x2e>
 8003dd6:	e7d6      	b.n	8003d86 <__swbuf_r+0x2a>

08003dd8 <__swsetup_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <__swsetup_r+0xa8>)
 8003ddc:	4605      	mov	r5, r0
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	460c      	mov	r4, r1
 8003de2:	b118      	cbz	r0, 8003dec <__swsetup_r+0x14>
 8003de4:	6a03      	ldr	r3, [r0, #32]
 8003de6:	b90b      	cbnz	r3, 8003dec <__swsetup_r+0x14>
 8003de8:	f7ff fa40 	bl	800326c <__sinit>
 8003dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003df0:	0719      	lsls	r1, r3, #28
 8003df2:	d422      	bmi.n	8003e3a <__swsetup_r+0x62>
 8003df4:	06da      	lsls	r2, r3, #27
 8003df6:	d407      	bmi.n	8003e08 <__swsetup_r+0x30>
 8003df8:	2209      	movs	r2, #9
 8003dfa:	602a      	str	r2, [r5, #0]
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e033      	b.n	8003e70 <__swsetup_r+0x98>
 8003e08:	0758      	lsls	r0, r3, #29
 8003e0a:	d512      	bpl.n	8003e32 <__swsetup_r+0x5a>
 8003e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e0e:	b141      	cbz	r1, 8003e22 <__swsetup_r+0x4a>
 8003e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e14:	4299      	cmp	r1, r3
 8003e16:	d002      	beq.n	8003e1e <__swsetup_r+0x46>
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f7ff fb2f 	bl	800347c <_free_r>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6063      	str	r3, [r4, #4]
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f043 0308 	orr.w	r3, r3, #8
 8003e38:	81a3      	strh	r3, [r4, #12]
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	b94b      	cbnz	r3, 8003e52 <__swsetup_r+0x7a>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d003      	beq.n	8003e52 <__swsetup_r+0x7a>
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f000 f85c 	bl	8003f0a <__smakebuf_r>
 8003e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e56:	f013 0201 	ands.w	r2, r3, #1
 8003e5a:	d00a      	beq.n	8003e72 <__swsetup_r+0x9a>
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60a2      	str	r2, [r4, #8]
 8003e60:	6962      	ldr	r2, [r4, #20]
 8003e62:	4252      	negs	r2, r2
 8003e64:	61a2      	str	r2, [r4, #24]
 8003e66:	6922      	ldr	r2, [r4, #16]
 8003e68:	b942      	cbnz	r2, 8003e7c <__swsetup_r+0xa4>
 8003e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e6e:	d1c5      	bne.n	8003dfc <__swsetup_r+0x24>
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	0799      	lsls	r1, r3, #30
 8003e74:	bf58      	it	pl
 8003e76:	6962      	ldrpl	r2, [r4, #20]
 8003e78:	60a2      	str	r2, [r4, #8]
 8003e7a:	e7f4      	b.n	8003e66 <__swsetup_r+0x8e>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	e7f7      	b.n	8003e70 <__swsetup_r+0x98>
 8003e80:	20000018 	.word	0x20000018

08003e84 <_sbrk_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	2300      	movs	r3, #0
 8003e88:	4d05      	ldr	r5, [pc, #20]	@ (8003ea0 <_sbrk_r+0x1c>)
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	f7fd f880 	bl	8000f94 <_sbrk>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_sbrk_r+0x1a>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_sbrk_r+0x1a>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000224 	.word	0x20000224

08003ea4 <memchr>:
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	4402      	add	r2, r0
 8003eac:	4293      	cmp	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	d101      	bne.n	8003eb6 <memchr+0x12>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e003      	b.n	8003ebe <memchr+0x1a>
 8003eb6:	7804      	ldrb	r4, [r0, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	428c      	cmp	r4, r1
 8003ebc:	d1f6      	bne.n	8003eac <memchr+0x8>
 8003ebe:	bd10      	pop	{r4, pc}

08003ec0 <__swhatbuf_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	4615      	mov	r5, r2
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	461e      	mov	r6, r3
 8003ece:	b096      	sub	sp, #88	@ 0x58
 8003ed0:	da0c      	bge.n	8003eec <__swhatbuf_r+0x2c>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003eda:	bf14      	ite	ne
 8003edc:	2340      	movne	r3, #64	@ 0x40
 8003ede:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	6031      	str	r1, [r6, #0]
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	b016      	add	sp, #88	@ 0x58
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	466a      	mov	r2, sp
 8003eee:	f000 f849 	bl	8003f84 <_fstat_r>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	dbed      	blt.n	8003ed2 <__swhatbuf_r+0x12>
 8003ef6:	9901      	ldr	r1, [sp, #4]
 8003ef8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003efc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f00:	4259      	negs	r1, r3
 8003f02:	4159      	adcs	r1, r3
 8003f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f08:	e7eb      	b.n	8003ee2 <__swhatbuf_r+0x22>

08003f0a <__smakebuf_r>:
 8003f0a:	898b      	ldrh	r3, [r1, #12]
 8003f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f0e:	079d      	lsls	r5, r3, #30
 8003f10:	4606      	mov	r6, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	d507      	bpl.n	8003f26 <__smakebuf_r+0x1c>
 8003f16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	6123      	str	r3, [r4, #16]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	6163      	str	r3, [r4, #20]
 8003f22:	b003      	add	sp, #12
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	466a      	mov	r2, sp
 8003f28:	ab01      	add	r3, sp, #4
 8003f2a:	f7ff ffc9 	bl	8003ec0 <__swhatbuf_r>
 8003f2e:	9f00      	ldr	r7, [sp, #0]
 8003f30:	4605      	mov	r5, r0
 8003f32:	4639      	mov	r1, r7
 8003f34:	4630      	mov	r0, r6
 8003f36:	f7ff fb0b 	bl	8003550 <_malloc_r>
 8003f3a:	b948      	cbnz	r0, 8003f50 <__smakebuf_r+0x46>
 8003f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f40:	059a      	lsls	r2, r3, #22
 8003f42:	d4ee      	bmi.n	8003f22 <__smakebuf_r+0x18>
 8003f44:	f023 0303 	bic.w	r3, r3, #3
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	81a3      	strh	r3, [r4, #12]
 8003f4e:	e7e2      	b.n	8003f16 <__smakebuf_r+0xc>
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	9b01      	ldr	r3, [sp, #4]
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	b15b      	cbz	r3, 8003f7a <__smakebuf_r+0x70>
 8003f62:	4630      	mov	r0, r6
 8003f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f68:	f000 f81e 	bl	8003fa8 <_isatty_r>
 8003f6c:	b128      	cbz	r0, 8003f7a <__smakebuf_r+0x70>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	f023 0303 	bic.w	r3, r3, #3
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	431d      	orrs	r5, r3
 8003f7e:	81a5      	strh	r5, [r4, #12]
 8003f80:	e7cf      	b.n	8003f22 <__smakebuf_r+0x18>
	...

08003f84 <_fstat_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4d06      	ldr	r5, [pc, #24]	@ (8003fa4 <_fstat_r+0x20>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	f7fc ffd9 	bl	8000f48 <_fstat>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	d102      	bne.n	8003fa0 <_fstat_r+0x1c>
 8003f9a:	682b      	ldr	r3, [r5, #0]
 8003f9c:	b103      	cbz	r3, 8003fa0 <_fstat_r+0x1c>
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000224 	.word	0x20000224

08003fa8 <_isatty_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	2300      	movs	r3, #0
 8003fac:	4d05      	ldr	r5, [pc, #20]	@ (8003fc4 <_isatty_r+0x1c>)
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fc ffd7 	bl	8000f66 <_isatty>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_isatty_r+0x1a>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_isatty_r+0x1a>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000224 	.word	0x20000224

08003fc8 <_init>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_fini>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr
